// Generated by CoffeeScript 1.12.1
(function() {
  var AABB, AjaxLoader, Animation, AnimationManager, ArrayUtility, AssetManager, AtlasFrameAnimation, Audio, AudioPlayer, BindManager, BitmapText, BodyManager, Camera, CanvasGame, CanvasRenderer, Circle, Collision, CollisionDetector, CollisionManager, Color, DebugConsole, DrawParams, ER, EffectComponent, EffectManager, Event, EventDispatcher, EventManager, FunctionUtility, FutureEvent, Game, GamePad, GamePadButton, GamePadManager, GamePadStick, GameThing, GameThingFactory, GridManager, HookManager, JerkFollow, Key, Keys, Layer, Layers, Load, LoadJob, LoadType, Loop, MathUtility, Mouse, ObjectUtility, Orbit, ParticleEmitter, ParticleManager, Point, RandomPool, Rectangle, ScheduledEvent, Shapes, SizeManager, Sound, Sprite, SpriteGroup, SpriteSheetAnimation, State, StateMachine, StateMachineManager, StringUtility, Text, Texture, Timer, Torch, TorchModule, TorchModules, TrailEffect, Trashable, Tween, TweenManager, TweenSetup, Util, Utilities, Vector, Video, Viewport, _measureCanvas, exports,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  ER = {};

  ER.ER = (function() {
    ER.prototype.message = null;

    ER.prototype.nativeError = null;

    function ER(fatal) {
      if (fatal) {
        this.Fatal();
      }
      this.nativeError = new Error(this.message);
    }

    ER.prototype.Fatal = function() {
      return Torch.FatalError(this.message);
    };

    ER.prototype.toString = function() {
      return this.message;
    };

    return ER;

  })();

  ER.ArgumentError = (function(superClass) {
    extend(ArgumentError, superClass);

    ArgumentError.prototype.message = null;

    function ArgumentError(argument, valueProvided, argumentTypes, fatal) {
      var index, k, len, ref, t;
      this.argument = argument;
      this.valueProvided = valueProvided;
      this.argumentTypes = argumentTypes;
      if (fatal == null) {
        fatal = false;
      }
      this.message = "ArgumentError: value '" + this.valueProvided + "(" + (Util.Type(this.valueProvided)) + ")' is not a valid argument for " + this.argument;
      if (this.argumentTypes != null) {
        this.message += "(";
        ref = this.argumentTypes;
        for (index = k = 0, len = ref.length; k < len; index = ++k) {
          t = ref[index];
          if (index !== 0) {
            this.message += ",";
          }
          this.message += t;
        }
        this.message += ")";
      }
      ArgumentError.__super__.constructor.call(this, fatal);
    }

    return ArgumentError;

  })(ER.ER);

  ArrayUtility = (function() {
    function ArrayUtility(array1) {
      this.array = array1;
    }

    ArrayUtility.prototype.Array = function() {
      return this.array;
    };

    ArrayUtility.prototype.All = function(applier) {
      var item, k, len, ref, results;
      ref = this.array;
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        item = ref[k];
        results.push(applier(item));
      }
      return results;
    };

    ArrayUtility.prototype.Find = function(selector) {
      var item, k, len, ref;
      ref = this.array;
      for (k = 0, len = ref.length; k < len; k++) {
        item = ref[k];
        if (selector(item)) {
          return item;
        }
      }
    };

    ArrayUtility.prototype.Filter = function(selector) {
      var item, k, len, ref, selectedItems;
      selectedItems = [];
      ref = this.array;
      for (k = 0, len = ref.length; k < len; k++) {
        item = ref[k];
        if (selector(item)) {
          selectedItems.push(item);
        }
      }
      return selectedItems;
    };

    ArrayUtility.prototype.Reject = function(selector) {
      var item, k, len, ref, selectedItems;
      selectedItems = [];
      ref = this.array;
      for (k = 0, len = ref.length; k < len; k++) {
        item = ref[k];
        if (!selector(item)) {
          selectedItems.push(item);
        }
      }
      return selectedItems;
    };

    ArrayUtility.prototype.Where = function(properties) {
      var items;
      items = this.Filter(function(item) {
        var key, value;
        for (key in properties) {
          value = properties[key];
          if (item[key] !== value) {
            return false;
          }
        }
        return true;
      });
      return items;
    };

    ArrayUtility.prototype.Every = function(selector) {
      var item, k, len, ref;
      ref = this.array;
      for (k = 0, len = ref.length; k < len; k++) {
        item = ref[k];
        if (!selector(item)) {
          return false;
        }
      }
      return true;
    };

    ArrayUtility.prototype.Some = function(selector) {
      var item, k, len, ref;
      ref = this.array;
      for (k = 0, len = ref.length; k < len; k++) {
        item = ref[k];
        if (selector(item)) {
          return true;
        }
      }
      return false;
    };

    ArrayUtility.prototype.Contains = function(item, startIndex) {
      var index;
      if (startIndex == null) {
        startIndex = 0;
      }
      index = this.array.indexOf(item);
      return index !== -1 && index >= startIndex;
    };

    ArrayUtility.prototype.Pluck = function(propertyName) {
      var item, k, len, properties, ref;
      properties = [];
      ref = this.array;
      for (k = 0, len = ref.length; k < len; k++) {
        item = ref[k];
        properties.push(item[propertyName]);
      }
      return properties;
    };

    ArrayUtility.prototype.Max = function(selector) {
      var compareValue, currentMax, item, k, len, ref;
      currentMax = 0;
      if (selector == null) {
        selector = function(item) {
          return item;
        };
      }
      ref = this.array;
      for (k = 0, len = ref.length; k < len; k++) {
        item = ref[k];
        compareValue = selector(item);
        if (compareValue > currentMax) {
          currentMax = item;
        }
      }
      return currentMax;
    };

    ArrayUtility.prototype.Min = function(selector) {
      var compareValue, currentMin, item, k, len, ref;
      currentMin = 0;
      if (selector == null) {
        selector = function(item) {
          return item;
        };
      }
      ref = this.array;
      for (k = 0, len = ref.length; k < len; k++) {
        item = ref[k];
        compareValue = selector(item);
        if (compareValue < currentMin) {
          currentMin = compareValue;
        }
      }
      return currentMin;
    };

    ArrayUtility.prototype.SortBy = function(sorter) {};

    ArrayUtility.prototype.GroupBy = function(grouper) {
      var group, groups, item, k, len, ref;
      if (grouper == null) {
        grouper = function(item) {
          return item.toString().length;
        };
      }
      groups = {};
      ref = this.array;
      for (k = 0, len = ref.length; k < len; k++) {
        item = ref[k];
        group = grouper(item);
        if (groups[group] == null) {
          groups[group] = [item];
        } else {
          groups[group].push(item);
        }
      }
      return groups;
    };

    ArrayUtility.prototype.CountBy = function(grouper) {
      var groups, key, value;
      groups = this.GroupBy(grouper);
      for (key in groups) {
        value = groups[key];
        groups[key] = value.length;
      }
      return groups;
    };

    ArrayUtility.prototype.Shuffle = function() {
      var currentIndex, randomIndex, temporaryValue;
      currentIndex = this.array.length;
      temporaryValue = currentIndex;
      randomIndex = currentIndex;
      while (0 !== currentIndex) {
        randomIndex = Math.floor(Math.random() * currentIndex);
        currentIndex -= 1;
        temporaryValue = this.array[currentIndex];
        this.array[currentIndex] = this.array[randomIndex];
        this.array[randomIndex] = temporaryValue;
      }
      return this.array;
    };

    ArrayUtility.prototype.Sample = function(n) {
      var results, sample;
      if (n == null) {
        n = 1;
      }
      sample = [];
      results = [];
      while (n > 0) {
        results.push(n--);
      }
      return results;
    };

    ArrayUtility.prototype.Partition = function(checker) {
      return [this.Filter(checker), this.Reject(checker)];
    };

    ArrayUtility.prototype.First = function(n) {
      var items;
      if (n == null) {
        n = 1;
      }
      if (n === 1) {
        return this.array[0];
      }
      items = [];
      while (n <= this.array.length) {
        items.push(this.array[n - 1]);
        n++;
      }
      return items;
    };

    ArrayUtility.prototype.Last = function(n) {
      var items;
      if (n == null) {
        n = 1;
      }
      if (n === 1) {
        return this.array[this.array.length - 1];
      }
      items = [];
      while (n <= this.array.length) {
        items.push(this.array[this.array.length - (n - 1)]);
        n++;
      }
      return items;
    };

    ArrayUtility.prototype.Flatten = function() {};

    ArrayUtility.prototype.Without = function() {
      var filteredItems, item, k, len, ref, values;
      values = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      filteredItems = [];
      ref = this.array;
      for (k = 0, len = ref.length; k < len; k++) {
        item = ref[k];
        if (values.indexOf(item) === -1) {
          filteredItems.push(item);
        }
      }
      return filteredItems;
    };

    ArrayUtility.prototype.Union = function() {
      var ar, arrays, ars, combinedArray, item, k, len, len1, m;
      arrays = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      ars = [this.array].concat(slice.call(arrays));
      combinedArray = [];
      for (k = 0, len = ars.length; k < len; k++) {
        ar = ars[k];
        for (m = 0, len1 = ar.length; m < len1; m++) {
          item = ar[m];
          if (combinedArray.indexOf(item) === -1) {
            combinedArray.push(item);
          }
        }
      }
      return combinedArray;
    };

    ArrayUtility.prototype.Intersection = function() {
      var ar, arrays, ars, combinedArray, index, item, k, key, len, len1, m, value;
      arrays = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      ars = [this.array].concat(slice.call(arrays));
      combinedArray = [];
      index = {};
      for (k = 0, len = ars.length; k < len; k++) {
        ar = ars[k];
        for (m = 0, len1 = ar.length; m < len1; m++) {
          item = ar[m];
          if (index[item] == null) {
            index[item] = 1;
          } else {
            index[item] += 1;
          }
        }
      }
      for (key in index) {
        value = index[key];
        if (value >= arrays.length) {
          combinedArray.push(key);
        }
      }
      return combinedArray;
    };

    ArrayUtility.prototype.Uniq = function() {};

    ArrayUtility.prototype.Zip = function() {
      var ar, arrays, combinedArray, index, item, k, len, len1, m, piece, ref;
      arrays = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      combinedArray = [];
      ref = this.array;
      for (index = k = 0, len = ref.length; k < len; index = ++k) {
        item = ref[index];
        piece = [item];
        for (m = 0, len1 = arrays.length; m < len1; m++) {
          ar = arrays[m];
          piece.push(ar[index]);
        }
        combinedArray.push(piece);
      }
      return combinedArray;
    };

    ArrayUtility.prototype.UnZip = function() {
      var arrays;
      arrays = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    };

    return ArrayUtility;

  })();

  StringUtility = (function() {
    function StringUtility(str1) {
      this.str = str1;
    }

    StringUtility.prototype.String = function() {
      return this.str;
    };

    StringUtility.prototype.Chunk = function(chunkLength) {
      this.str = this.str.match(new RegExp('.{1,' + chunkLength + '}', 'g'));
      return this.str;
    };

    StringUtility.prototype.Capitalize = function() {
      this.str[0] = this.str[0].toUpperCase();
      return this.str;
    };

    return StringUtility;

  })();

  FunctionUtility = (function() {
    function FunctionUtility(func1) {
      this.func = func1;
    }

    FunctionUtility.prototype.Defer = function() {
      var args, f;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      f = (function(_this) {
        return function() {
          return _this.func.apply(_this, args);
        };
      })(this);
      return setTimeout(f, 0);
    };

    FunctionUtility.prototype.Once = function() {
      var newFunc, oldFunc;
      oldFunc = this.func;
      newFunc = function() {
        var args;
        args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
        if (this.called) {
          return;
        }
        oldFunc.apply(null, args);
        return this.called = true;
      };
      return newFunc;
    };

    FunctionUtility.prototype.After = function(timesBeforeExecuted) {
      var newFunc, oldFunc;
      oldFunc = this.func;
      newFunc = function() {
        var args;
        args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
        this.timesBeforeExecuted += 1;
        if (this.calledCount < timesBeforeExecuted) {
          return;
        }
        oldFunc.apply(null, args);
        return this.called = true;
      };
      newFunc.timesBeforeExecuted = 0;
      return newFunc;
    };

    FunctionUtility.prototype.Before = function(timesExecuted) {
      var newFunc, oldFunc;
      oldFunc = this.func;
      newFunc = function() {
        var args;
        args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
        this.timesExecuted += 1;
        if (this.calledCount > timesExecuted) {
          return;
        }
        oldFunc.apply(null, args);
        return this.called = true;
      };
      newFunc.timesExecuted = 0;
      return newFunc;
    };

    FunctionUtility.prototype.Compose = function() {
      var allFuncs, funcs, i, newFunc;
      funcs = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      allFuncs = [this.func].concat(slice.call(funcs));
      i = 0;
      newFunc = function() {
        var lastReturn, results;
        lastReturn = void 0;
        results = [];
        while (i < allFuncs.length) {
          lastReturn = allFuncs[i](lastReturn);
          results.push(i++);
        }
        return results;
      };
      return newFunc;
    };

    return FunctionUtility;

  })();

  ObjectUtility = (function() {
    function ObjectUtility(obj1) {
      this.obj = obj1;
    }

    ObjectUtility.prototype.Keys = function() {
      var key, keys, ref, value;
      keys = [];
      ref = this.obj;
      for (key in ref) {
        value = ref[key];
        keys.push(key);
      }
      return keys;
    };

    ObjectUtility.prototype.Values = function() {
      var key, ref, value, values;
      values = [];
      ref = this.obj;
      for (key in ref) {
        value = ref[key];
        values.push(value);
      }
      return values;
    };

    ObjectUtility.prototype.All = function(applier) {
      var key, ref, value;
      ref = this.obj;
      for (key in ref) {
        value = ref[key];
        this.obj[key] = applier(key, value);
      }
      return this.obj;
    };

    ObjectUtility.prototype.Invert = function() {
      var key, newObj, ref, value;
      newObj = {};
      ref = this.obj;
      for (key in ref) {
        value = ref[key];
        newObj[value] = key;
      }
      return newObj;
    };

    ObjectUtility.prototype.Functions = function() {
      var functionList, key, ref, value;
      functionList = [];
      ref = this.obj;
      for (key in ref) {
        value = ref[key];
        if (typeof value === "function") {
          functionList.push(value.name);
        }
      }
      return functionList;
    };

    ObjectUtility.prototype.Extend = function() {
      var k, key, len, obj, objects, value;
      objects = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      for (k = 0, len = objects.length; k < len; k++) {
        obj = objects[k];
        for (key in obj) {
          value = obj[key];
          this.obj[key] = value;
        }
      }
      return this.obj;
    };

    ObjectUtility.prototype.Pick = function() {
      var k, key, len, newObj, pickKeys, ref, value;
      pickKeys = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      newObj = {};
      if (typeof pickKeys === "function") {
        ref = this.obj;
        for (key in ref) {
          value = ref[key];
          if (pickKeys(key, value, this.obj)) {
            newObj[key] = value;
          }
        }
      } else {
        for (k = 0, len = pickKeys.length; k < len; k++) {
          key = pickKeys[k];
          newObj[key] = this.obj[key];
        }
      }
      return newObj;
    };

    ObjectUtility.prototype.Omit = function() {
      var key, newObj, omitKeys, ref, ref1, value;
      omitKeys = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      newObj = {};
      if (typeof omitKeys === "function") {
        ref = this.obj;
        for (key in ref) {
          value = ref[key];
          if (!omitKeys(key, value, this.obj)) {
            newObj[key] = value;
          }
        }
      } else {
        ref1 = this.obj;
        for (key in ref1) {
          value = ref1[key];
          if (omitKeys.indexOf(key) === -1) {
            newObj[key] = this.obj[key];
          }
        }
      }
      return newObj;
    };

    ObjectUtility.prototype.Clone = function() {};

    ObjectUtility.prototype.Has = function(key) {
      if (this.obj[key] == null) {
        return false;
      }
      return true;
    };

    ObjectUtility.prototype.Matches = function(otherObj) {
      var key, value;
      for (key in otherObj) {
        value = otherObj[key];
        if (this.obj[key] !== value) {
          return false;
        }
      }
      return true;
    };

    ObjectUtility.prototype.Empty = function() {
      return this.Keys().length === 0;
    };

    return ObjectUtility;

  })();

  MathUtility = (function() {
    function MathUtility() {
      this.RandomPool = RandomPool;
    }

    MathUtility.prototype.RandomInRange = function(min, max) {
      return Math.random() * (max - min + 1) + min;
    };

    MathUtility.prototype.Sign = function(n) {
      if (n > 0) {
        return 1;
      } else if (n < 0) {
        return -1;
      }
      return 0;
    };

    return MathUtility;

  })();

  RandomPool = (function() {
    RandomPool.prototype.choices = null;

    function RandomPool() {
      this.choices = [];
    }

    RandomPool.prototype.AddChoice = function(item, probability) {
      var i, results;
      i = probability;
      results = [];
      while (i > 0) {
        i--;
        results.push(this.choices.push(item));
      }
      return results;
    };

    RandomPool.prototype.Pick = function() {
      this.choices = Util.Array(this.choices).Shuffle();
      return this.choices[0];
    };

    return RandomPool;

  })();

  TorchModules = [];

  TorchModule = function(mod, optionalName) {
    var name;
    name = mod.name;
    if (optionalName != null) {
      name = optionalName;
    }
    return TorchModules.push({
      name: name,
      mod: mod
    });
  };

  Utilities = (function() {
    function Utilities() {
      this.Math = new MathUtility();
    }

    Utilities.prototype.String = function(str) {
      return new StringUtility(str);
    };

    Utilities.prototype.Array = function(array) {
      return new ArrayUtility(array);
    };

    Utilities.prototype.Function = function(func) {
      return new FunctionUtility(func);
    };

    Utilities.prototype.Object = function(obj) {
      return new ObjectUtility(obj);
    };

    Utilities.prototype.Type = function(obj) {
      var classToType, k, len, name, strType, types;
      if (obj != null) {
        if (obj.torch_type != null) {
          return obj.torch_type;
        }
        classToType = {};
        types = ["Boolean", "Number", "String", "Function", "Array", "Date", "RegExp", "Undefined", "Null"];
        for (k = 0, len = types.length; k < len; k++) {
          name = types[k];
          classToType["[object " + name + "]"] = name.toLowerCase();
        }
        strType = Object.prototype.toString.call(obj);
        return classToType[strType] || "object";
      } else {
        return null;
      }
    };

    Utilities.prototype.Enum = function() {
      var i, k, len, obj, part, parts;
      parts = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      obj = {
        nameMap: {}
      };
      obj.GetStringValue = function(en) {
        return this.nameMap[en];
      };
      for (i = k = 0, len = parts.length; k < len; i = ++k) {
        part = parts[i];
        obj[part] = i + 1;
        obj.nameMap[i + 1] = part;
      }
      return obj;
    };

    return Utilities;

  })();

  Util = new Utilities();

  AjaxLoader = (function() {
    AjaxLoader.prototype.onFinish = function() {};

    AjaxLoader.prototype.onError = function() {};

    function AjaxLoader(url, responseType) {
      if (responseType == null) {
        responseType = window.Torch.AjaxData.Text;
      }
      this.url = url;
      this.responseType = this.GetResponseTypeString(responseType);
    }

    AjaxLoader.prototype.GetResponseTypeString = function(responseType) {
      switch (responseType) {
        case window.Torch.AjaxData.DOMString:
          return "";
        case window.Torch.AjaxData.ArrayBuffer:
          return "arraybuffer";
        case window.Torch.AjaxData.Blob:
          return "blob";
        case window.Torch.AjaxData.Document:
          return "document";
        case window.Torch.AjaxData.Json:
          return "json";
        case window.Torch.AjaxData.Text:
          return "text";
      }
    };

    AjaxLoader.prototype.Error = function(func) {
      return this.onError = func;
    };

    AjaxLoader.prototype.Finish = function(func) {
      return this.onFinish = func;
    };

    AjaxLoader.prototype.Load = function() {
      var request;
      request = new XMLHttpRequest();
      request.open('GET', this.url, true);
      request.responseType = this.responseType;
      request.onload = (function(_this) {
        return function() {
          return _this.onFinish(request.response, _this);
        };
      })(this);
      return request.send();
    };

    return AjaxLoader;

  })();

  if (typeof window !== "undefined" && window !== null) {
    window.onerror = function() {
      var args, errorObj;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      if (!window.Torch.STRICT_ERRORS) {
        return;
      }
      document.body.style.backgroundColor = "black";
      errorObj = args[4];
      if (errorObj !== void 0) {
        return Torch.FatalError(errorObj);
      } else {
        return Torch.FatalError("An error has occured");
      }
    };
  }

  Function.prototype.MixIn = Function.prototype.is = function(otherFunction) {
    var items, key, proto, value;
    proto = this.prototype;
    items = Object.create(otherFunction.prototype);
    for (key in items) {
      value = items[key];
      proto[key] = value;
    }
    return this;
  };

  Function.prototype.property = function(prop, desc) {
    return Object.defineProperty(this.prototype, prop, desc);
  };

  EventDispatcher = (function() {
    function EventDispatcher() {}

    EventDispatcher.dispatchers = [];

    EventDispatcher.prototype.InitEventDispatch = function() {
      this.events = {};
      return EventDispatcher.dispatchers.push(this);
    };

    EventDispatcher.prototype.On = function(eventName, eventHandle) {
      var eventNest;
      if (!this.events[eventName]) {
        eventNest = [];
        eventNest.triggers = 0;
        this.events[eventName] = eventNest;
      }
      this.events[eventName].push(eventHandle);
      return this;
    };

    EventDispatcher.prototype.Emit = function(eventName, eventArgs) {
      var ev, k, len, ref;
      if (this.events[eventName] !== void 0) {
        ref = this.events[eventName];
        for (k = 0, len = ref.length; k < len; k++) {
          ev = ref[k];
          this.events[eventName].triggers++;
          ev(eventArgs);
        }
      }
      return this;
    };

    EventDispatcher.prototype.Off = function(eventName) {
      var key, ref, val;
      if (eventName == null) {
        eventName = "";
      }
      if (eventName !== "") {
        this.events[eventName] = void 0;
      } else {
        ref = this.events;
        for (key in ref) {
          val = ref[key];
          this.events[key] = void 0;
        }
      }
      return this;
    };

    return EventDispatcher;

  })();

  Trashable = (function() {
    function Trashable() {}

    Trashable.prototype.trash = false;

    Trashable.prototype.trashed = false;

    Trashable.prototype.Trash = function() {
      return this.trash = true;
    };

    return Trashable;

  })();

  TorchModule(GameThing = (function() {
    function GameThing() {}

    GameThing.MixIn(Trashable);

    GameThing.prototype.torch_game_thing = true;

    GameThing.prototype.torch_uid = null;

    GameThing.prototype.torch_add_order = null;

    GameThing.prototype.game = null;

    GameThing.prototype.drawIndex = 0;

    GameThing.prototype.Update = function() {};

    GameThing.prototype.Draw = function() {};

    GameThing.prototype.Id = function(id) {
      return this.game.thingMap[id] = this;
    };

    return GameThing;

  })());

  TorchModule(DebugConsole = (function() {
    DebugConsole.prototype.enabled = false;

    DebugConsole.prototype.console = null;

    DebugConsole.prototype.consoleInput = null;

    DebugConsole.prototype.consoleOutput = null;

    DebugConsole.prototype.commands = null;

    DebugConsole.prototype.variables = null;

    function DebugConsole(game1) {
      var div, html;
      this.game = game1;
      html = "<div id = \"torch-console\" style = \"position: absolute;z-index: 100;top:0;border: 1px solid orange;background-color:black\">\n    <p style = \"color:white;margin-left:1%;font-family:monospace\">Torch Dev Console. Type /HELP for usage</p>\n    <input type=\"text\" id = \"torch-console-input\" placeholder=\"Torch Dev Console, type /HELP for usage\"/ style = \"outline: none;border: none;font-family: monospace;color: white;background-color: black;font-size: 16px;padding: 3%;width: 100%;\" />\n    <div id = \"torch-console-output\" style = \"overflow:auto;outline: none;border: none;font-family: monospace;color: white;background-color: black;font-size: 14px;padding: 1%;width: 98%;height:250px\"></div>\n</div>";
      div = document.createElement("div");
      div.innerHTML = html;
      div.style.display = "none";
      document.body.appendChild(div);
      this.console = div;
      this.consoleInput = document.getElementById("torch-console-input");
      this.consoleOutput = document.getElementById("torch-console-output");
      this.commands = {};
      this.variables = {};
      this.LoadDefaultCommands();
      document.addEventListener("keypress", (function(_this) {
        return function(e) {
          if (e.keyCode === 47) {
            return _this.Toggle(true);
          } else if (e.keyCode === 13) {
            return _this.ParseCommand();
          }
        };
      })(this));
      document.addEventListener("keydown", (function(_this) {
        return function(e) {
          if (e.keyCode === 27) {
            return _this.Toggle(false);
          }
        };
      })(this));
    }

    DebugConsole.prototype.Toggle = function(tog) {
      if (tog == null) {
        tog = true;
      }
      if (tog) {
        this.console.style.display = "block";
        this.consoleInput.focus();
        this.enabled = true;
        return Util.Array(this.game.things).All(function(thing) {
          if (thing.Pause) {
            return thing.Pause();
          }
        });
      } else {
        this.console.style.display = "none";
        this.consoleInput.value = "";
        this.enabled = false;
        return Util.Array(this.game.things).All(function(thing) {
          if (thing.Pause) {
            return thing.Pause(false);
          }
        });
      }
    };

    DebugConsole.prototype.Output = function(content, color) {
      if (color == null) {
        color = "white";
      }
      content = content.replace(/\n/g, "<br>");
      return this.consoleOutput.innerHTML += "<p style='color:orange'>TorchDev$</p><p style='color:" + color + "'>" + content + "</p>";
    };

    DebugConsole.prototype.ParseCommand = function() {
      var args, command, commandText, index, k, len, option, ref;
      if (!this.enabled) {
        return;
      }
      commandText = this.consoleInput.value;
      commandText = commandText.replace(/\$(.*?)\$/g, (function(_this) {
        return function(text) {
          var clippedText;
          clippedText = text.substring(1, text.length - 1);
          return _this.variables[clippedText];
        };
      })(this));
      command = commandText.split(" ")[0].split("/")[1];
      args = [];
      ref = commandText.split(" ");
      for (index = k = 0, len = ref.length; k < len; index = ++k) {
        option = ref[index];
        if (index !== 0) {
          args.push(option);
        }
      }
      return this.ExecuteCommand(command, args);
    };

    DebugConsole.prototype.ExecuteCommand = function(command, args) {
      var ref;
      if (!this.commands[command]) {
        this.Output("Command '" + command + "' does not exist.", "red");
      } else {
        return (ref = this.commands)[command].apply(ref, [this].concat(slice.call(args)));
      }
    };

    DebugConsole.prototype.AddCommand = function(name, callback) {
      return this.commands[name] = callback;
    };

    DebugConsole.prototype.LoadDefaultCommands = function() {
      this.AddCommand("HELP", (function(_this) {
        return function(tConsole) {
          return tConsole.Output("type '/HELP' for help\ntype '/FPS' for frame rate\ntype '/TIME' for game time\ntype '/E [statement]' to execute a JavaScript statement\ntype '/RUN [path] to load and execute a JavaScript file'");
        };
      })(this));
      this.AddCommand("CLEAR", (function(_this) {
        return function(tConsole) {
          return _this.consoleOutput.innerHTML = "";
        };
      })(this));
      this.AddCommand("FPS", (function(_this) {
        return function(tConsole) {
          return tConsole.Output("Current FPS: " + _this.game.fps + "\nAverage FPS: " + 0);
        };
      })(this));
      this.AddCommand("TIME", (function(_this) {
        return function(tConsole) {
          return tConsole.Output("Total Game Time: " + _this.game.time + "\nDelta Time: " + _this.game.deltaTime);
        };
      })(this));
      this.AddCommand("RUN", (function(_this) {
        return function(tConsole, filePath) {
          var loader;
          loader = new Torch.AjaxLoader(filePath, Torch.AjaxData.Text);
          loader.Finish(function(data) {
            var error;
            try {
              eval(data);
              return tConsole.Output("File Executed", "green");
            } catch (error1) {
              error = error1;
              return tConsole.Output("File: '" + statement + "' caused an error. " + error, "red");
            }
          });
          return loader.Load();
        };
      })(this));
      this.AddCommand("SET", (function(_this) {
        return function(tConsole, name, value) {
          if (isNaN(value)) {
            _this.variables[name] = value;
          } else {
            _this.variables[name] = parseFloat(value);
          }
          return _this.Output("Set " + name + " to " + value, "green");
        };
      })(this));
      return this.AddCommand("E", (function(_this) {
        return function(tConsole, statement) {
          var error;
          try {
            eval(statement);
            return tConsole.Output("Statment Executed", "green");
          } catch (error1) {
            error = error1;
            return tConsole.Output("Statement: '" + statement + "' caused an error. " + error, "red");
          }
        };
      })(this));
    };

    return DebugConsole;

  })());

  BodyManager = (function() {
    function BodyManager(sprite1) {
      this.sprite = sprite1;
      this.game = this.sprite.game;
      this.velocity = new Vector(0, 0);
      this.acceleration = new Vector(0, 0);
      this.omega = 0;
      this.alpha = 0;
      this.distance = 0;
      this.orbit = null;
    }

    BodyManager.prototype.Update = function() {
      var dX, dY;
      dX = this.velocity.x * this.game.Loop.updateDelta;
      dY = this.velocity.y * this.game.Loop.updateDelta;
      this.distance += Math.sqrt((dX * dX) + (dY * dY));
      this.sprite.position.x += dX;
      this.sprite.position.y += dY;
      this.velocity.x += this.acceleration.x * this.game.Loop.updateDelta;
      this.velocity.y += this.acceleration.y * this.game.Loop.updateDelta;
      this.sprite.rotation += this.omega * this.game.Loop.updateDelta;
      this.sprite.omega += this.alpha * this.game.Loop.updateDelta;
      if (this.orbit != null) {
        return this.orbit.Update();
      }
    };

    BodyManager.prototype.Orbit = function(spriteToOrbit, speed, length) {
      var startPosition;
      this.orbit = new Orbit(this.sprite, spriteToOrbit, speed, length);
      startPosition = this.orbit.GetStartPosition();
      return this.sprite.game.Tweens.Tween(this.sprite.position, 2000, Torch.Easing.Smooth).To({
        x: startPosition.x,
        y: startPosition.y
      }).On("Finish", (function(_this) {
        return function() {
          return _this.orbit.enabled = true;
        };
      })(this));
    };

    BodyManager.prototype.Debug = function(color) {
      if (color == null) {
        color = "red";
      }
      return this.DEBUG = color;
    };

    BodyManager.prototype.AngleTo = function(otherSprite) {
      var directionVector;
      directionVector = this.DirectionTo(otherSprite);
      return directionVector.angle;
    };

    BodyManager.prototype.DistanceTo = function(otherSprite) {
      var otherVec, thisVec;
      thisVec = new Vector(this.sprite.position.x, this.sprite.position.y);
      otherVec = new Vector(otherSprite.position.x, otherSprite.position.y);
      otherVec.SubtractVector(thisVec);
      return otherVec.magnitude;
    };

    BodyManager.prototype.DirectionTo = function(otherSprite) {
      var vec;
      vec = new Vector(otherSprite.position.x - this.sprite.position.x, otherSprite.position.y - this.sprite.position.y);
      vec.Normalize();
      return vec;
    };

    return BodyManager;

  })();

  Orbit = (function() {
    Orbit.prototype.sprite = null;

    Orbit.prototype.game = null;

    Orbit.prototype.spriteToOrbit = null;

    Orbit.prototype.enabled = false;

    Orbit.prototype.orbitSpeed = 0;

    Orbit.prototype.orbitAngle = 0;

    Orbit.prototype.orbitLength = 0;

    function Orbit(sprite1, spriteToOrbit1, orbitSpeed, orbitLength) {
      this.sprite = sprite1;
      this.spriteToOrbit = spriteToOrbit1;
      this.orbitSpeed = orbitSpeed;
      this.orbitLength = orbitLength;
      this.game = this.sprite.game;
    }

    Orbit.prototype.Update = function() {
      if (!this.enabled) {
        return;
      }
      this.orbitAngle += this.orbitSpeed * this.game.Loop.updateDelta;
      this.sprite.position.x = this.orbitLength * Math.cos(this.orbitAngle) + (this.spriteToOrbit.position.x + this.spriteToOrbit.rectangle.width / 2);
      return this.sprite.position.y = this.orbitLength * Math.sin(this.orbitAngle) + (this.spriteToOrbit.position.y + this.spriteToOrbit.rectangle.height / 2);
    };

    Orbit.prototype.GetStartPosition = function() {
      var startX, startY;
      startX = this.orbitLength * Math.cos(0) + (this.spriteToOrbit.position.x + this.spriteToOrbit.rectangle.width / 2);
      startY = this.orbitLength * Math.sin(0) + (this.spriteToOrbit.position.y + this.spriteToOrbit.rectangle.height / 2);
      return new Vector(startX, startY);
    };

    return Orbit;

  })();

  SizeManager = (function() {
    SizeManager.prototype.width = 0;

    SizeManager.prototype.height = 0;

    SizeManager.prototype.scale = null;

    function SizeManager(sprite1) {
      var rect;
      this.sprite = sprite1;
      rect = this.sprite.rectangle;
      this.width = rect.width;
      this.height = rect.height;
      this.scale = {
        width: 1,
        height: 1
      };
    }

    SizeManager.prototype.Update = function() {
      var rect;
      rect = this.sprite.rectangle;
      if (this.sprite.torch_shape) {
        rect.width = this.sprite.width;
        return rect.height = this.sprite.height;
      }
    };

    SizeManager.prototype.Set = function(width, height) {
      this.width = this.sprite.rectangle.width = width * this.scale.width;
      return this.height = this.sprite.rectangle.height = height * this.scale.height;
    };

    SizeManager.prototype.Scale = function(widthScale, heightScale) {
      var rect;
      rect = this.sprite.rectangle;
      this.scale.width = widthScale;
      this.scale.height = heightScale;
      rect.width = this.width * this.scale.width;
      return rect.height = this.height * this.scale.height;
    };

    return SizeManager;

  })();

  EventManager = (function() {
    EventManager.prototype.mouseOver = false;

    EventManager.prototype.clickTrigger = false;

    EventManager.prototype.clickAwayTrigger = false;

    EventManager.prototype.draw = true;

    EventManager.prototype.wasClicked = false;

    function EventManager(sprite1) {
      this.sprite = sprite1;
      this.game = this.sprite.game;
    }

    EventManager.prototype.Update = function() {
      var mouseRec, reComputedMouseRec;
      if (!this.game.Mouse.GetRectangle().Intersects(this.sprite.rectangle) && this.mouseOver) {
        this.mouseOver = false;
        this.sprite.Emit("MouseLeave", new Torch.Event(this.game, {
          sprite: this.sprite
        }));
      }
      if (this.game.Mouse.GetRectangle().Intersects(this.sprite.rectangle)) {
        if (!this.mouseOver) {
          this.sprite.Emit("MouseOver", new Torch.Event(this.game, {
            sprite: this.sprite
          }));
        }
        this.mouseOver = true;
      } else if (this.sprite.fixed) {
        mouseRec = this.game.Mouse.GetRectangle();
        reComputedMouseRec = new Rectangle(mouseRec.x, mouseRec.y, mouseRec.width, mouseRec.height);
        reComputedMouseRec.x += this.game.Camera.position.x;
        reComputedMouseRec.y += this.game.Camera.position.y;
        if (reComputedMouseRec.Intersects(this.sprite.rectangle)) {
          this.mouseOver = true;
        } else {
          this.mouseOver = false;
        }
      } else {
        this.mouseOver = false;
      }
      if (this.mouseOver && this.game.Mouse.down && !this.clickTrigger) {
        this.clickTrigger = true;
        this.sprite.Emit("MouseDown", new Torch.Event(this.game, {
          sprite: this.sprite
        }));
      }
      if (this.clickTrigger && !this.game.Mouse.down && this.mouseOver) {
        this.wasClicked = true;
        this.sprite.Emit("MouseUp", new Torch.Event(this.game, {
          sprite: this.sprite
        }));
        this.sprite.Emit("Click", new Torch.Event(this.game, {
          sprite: this.sprite
        }));
        this.clickTrigger = false;
      }
      if (this.clickTrigger && !this.game.Mouse.down && !this.mouseOver) {
        this.clickTrigger = false;
      }
      if (!this.game.Mouse.down && !this.mouseOver && this.clickAwayTrigger) {
        this.sprite.Emit("ClickAway", new Torch.Event(this.game, {
          sprite: this.sprite
        }));
        this.wasClicked = false;
        return this.clickAwayTrigger = false;
      } else if (this.clickTrigger && !this.game.Mouse.down && this.mouseOver) {
        return this.clickAwayTrigger = false;
      } else if (this.game.Mouse.down && !this.mouseOver) {
        return this.clickAwayTrigger = true;
      }
    };

    return EventManager;

  })();

  EffectManager = (function() {
    EffectManager.prototype.tint = null;

    EffectManager.prototype.mask = null;

    EffectManager.prototype.effects = null;

    function EffectManager(sprite1) {
      this.sprite = sprite1;
      this.effects = [];
      this.tint = new EffectComponent.Tint();
      this.mask = new EffectComponent.Mask();
    }

    EffectManager.prototype.Update = function() {
      var effect;
      return this.effects = (function() {
        var k, len, ref, results;
        ref = this.effects;
        results = [];
        for (k = 0, len = ref.length; k < len; k++) {
          effect = ref[k];
          effect.Update();
          if (!effect.trash) {
            results.push(effect);
          } else {
            results.push(void 0);
          }
        }
        return results;
      }).call(this);
    };

    EffectManager.prototype.Blink = function(interval) {
      var t;
      if (interval == null) {
        interval = 300;
      }
      t = this.sprite.game.Tweens.Tween(this.sprite, interval, Torch.Easing.Smooth).To({
        opacity: 0
      }).Cycle();
      return t;
    };

    EffectManager.prototype.Flash = function(color, time) {
      var t;
      if (color == null) {
        color = "red";
      }
      if (time == null) {
        time = 100;
      }
      this.tint.color = color;
      t = this.sprite.game.Tweens.Tween(this.tint, time, Torch.Easing.Smooth).From({
        opacity: 0
      }).To({
        opacity: 1
      });
      return t.On("Finish", (function(_this) {
        return function() {
          var t2;
          t2 = _this.sprite.game.Tweens.Tween(_this.tint, time, Torch.Easing.Smooth).To({
            opacity: 0
          });
          return t2.On("Finish", function() {
            _this.tint.color = null;
            return _this.tint.opacity = 0.5;
          });
        };
      })(this));
    };

    EffectManager.prototype.Crumple = function(ratio, time) {
      var targetHeight;
      targetHeight = this.sprite.rectangle.height * ratio;
      return this.sprite.game.Tweens.Tween(this.sprite.rectangle, time, Torch.Easing.Smooth).To({
        height: targetHeight
      });
    };

    EffectManager.prototype.Stretch = function(ratio, time) {
      var targetWidth;
      targetWidth = this.sprite.rectangle.width * ratio;
      return this.sprite.game.Tweens.Tween(this.sprite.rectangle, time, Torch.Easing.Smooth).To({
        width: targetWidth
      });
    };

    EffectManager.prototype.Squirt = function(point, time) {
      var heightDiff, origHeight, origWidth, tween, widthDiff;
      origWidth = this.sprite.rectangle.width;
      origHeight = this.sprite.rectangle.height;
      widthDiff = Math.abs(point.x - this.sprite.position.x);
      heightDiff = Math.abs(point.y - this.sprite.position.y);
      if (widthDiff > 0) {
        this.sprite.game.Tweens.Tween(this.sprite.rectangle, time, Torch.Easing.Smooth).To({
          width: widthDiff
        });
      }
      if (heightDiff > 0) {
        this.sprite.game.Tweens.Tween(this.sprite.rectangle, time, Torch.Easing.Smooth).To({
          height: heightDiff
        });
      }
      tween = this.sprite.game.Tweens.Tween(this.sprite.position, time, Torch.Easing.Smooth).To({
        x: point.x,
        y: point.y
      });
      return tween.On("Finish", (function(_this) {
        return function() {
          return _this.sprite.game.Tweens.Tween(_this.sprite.rectangle, time, Torch.Easing.Smooth).To({
            width: origWidth,
            height: origHeight
          });
        };
      })(this));
    };

    EffectManager.prototype.Trail = function() {
      return this.effects.push(new TrailEffect(this.sprite));
    };

    return EffectManager;

  })();

  EffectComponent = {};

  EffectComponent.Tint = (function() {
    function Tint() {}

    Tint.prototype._color = null;

    Tint.prototype._opacity = 0.5;

    Tint.property('color', {
      get: function() {
        return this._color;
      },
      set: function(value) {
        return this._color = value;
      }
    });

    Tint.property('opacity', {
      get: function() {
        return this._opacity;
      },
      set: function(value) {
        return this._opacity = value;
      }
    });

    return Tint;

  })();

  EffectComponent.Mask = (function() {
    function Mask() {}

    Mask.prototype._texture = null;

    Mask.prototype._in = false;

    Mask.prototype._out = false;

    Mask.property('texture', {
      get: function() {
        return this._texture;
      },
      set: function(value) {
        return this._texture = value;
      }
    });

    Mask.property('in', {
      get: function() {
        return this._in;
      },
      set: function(value) {
        return this._in = value;
      }
    });

    Mask.property('out', {
      get: function() {
        return this._out;
      },
      set: function(value) {
        return this._out = value;
      }
    });

    return Mask;

  })();

  TrailEffect = (function() {
    TrailEffect.prototype.fadeTime = 200;

    function TrailEffect(sprite1) {
      this.sprite = sprite1;
    }

    TrailEffect.prototype.Update = function() {
      var t;
      t = new Sprite(this.sprite.game, this.sprite.position.x, this.sprite.position.y);
      t.Bind.Texture(this.sprite.texture.image);
      t.Size.Scale(1, 1);
      t.drawIndex = this.sprite.drawIndex - 1;
      t.rotation = this.sprite.rotation;
      return this.sprite.game.Tweens.Tween(t, this.fadeTime, Torch.Easing.Smooth).From({
        opacity: 0.2
      }).To({
        opacity: 0
      }).On("Finish", (function(_this) {
        return function() {
          return t.Trash();
        };
      })(this));
    };

    return TrailEffect;

  })();

  StateMachineManager = (function() {
    function StateMachineManager(sprite1) {
      this.sprite = sprite1;
      this.stateMachines = {};
    }

    StateMachineManager.prototype.CreateStateMachine = function(name) {
      this.stateMachines[name] = new StateMachine(this.sprite);
      return this.stateMachines[name];
    };

    StateMachineManager.prototype.GetStateMachine = function(name) {
      return this.stateMachines[name];
    };

    StateMachineManager.prototype.Update = function() {
      var key, ref, results, sm;
      ref = this.stateMachines;
      results = [];
      for (key in ref) {
        sm = ref[key];
        results.push(sm.Update());
      }
      return results;
    };

    return StateMachineManager;

  })();


  /*
      @class GridManager
  
      Manages the relative position of sprites
   */

  GridManager = (function() {
    GridManager.prototype.parent = null;

    GridManager.prototype.children = null;

    GridManager.prototype.centered = false;

    GridManager.prototype.centerVertical = false;

    GridManager.prototype.alignLeft = false;

    GridManager.prototype.alignRight = false;

    GridManager.prototype.alignTop = false;

    GridManager.prototype.alignBottom = false;

    GridManager.prototype.margin = null;

    function GridManager(sprite1) {
      this.sprite = sprite1;
      this.position = new Point(0, 0);
      this.children = [];
      this.margin = {
        left: 0,
        top: 0
      };
    }

    GridManager.prototype.Align = function() {
      var k, len, positionTags, tag;
      positionTags = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      for (k = 0, len = positionTags.length; k < len; k++) {
        tag = positionTags[k];
        switch (tag) {
          case "left":
            this.alignLeft = true;
            break;
          case "right":
            this.alignRight = true;
            break;
          case "top":
            this.alignTop = true;
            break;
          case "bottom":
            this.alignBottom = true;
        }
      }
      return this;
    };

    GridManager.prototype.Center = function(turnOn) {
      if (turnOn == null) {
        turnOn = true;
      }
      this.centered = turnOn;
      return this;
    };

    GridManager.prototype.CenterVertical = function(turnOn) {
      if (turnOn == null) {
        turnOn = true;
      }
      this.centerVertical = turnOn;
      return this;
    };

    GridManager.prototype.Margin = function(left, top) {
      if (left == null) {
        left = 0;
      }
      if (top == null) {
        top = 0;
      }
      this.margin.left = left;
      this.margin.top = top;
      return this;
    };

    GridManager.prototype.Append = function(sprite) {
      sprite.Grid.parent = this.sprite;
      sprite.drawIndex = this.sprite.drawIndex + 1;
      sprite.fixed = this.sprite.fixed;
      return this;
    };

    GridManager.prototype.Parent = function() {
      return this.parent;
    };

    GridManager.prototype.Children = function(matcher) {
      var child, children, k, key, len, matching, ref, value;
      if (!matcher) {
        return this.children;
      }
      children = [];
      ref = this.children;
      for (k = 0, len = ref.length; k < len; k++) {
        child = ref[k];
        matching = true;
        for (key in matcher) {
          value = matcher[key];
          if (!child[key] === value) {
            matching = false;
          }
        }
        if (matching) {
          children.append(child);
        }
      }
      return children;
    };

    GridManager.prototype.Ancestors = function(matcher) {
      var ancestor, ancestors, key, matched, results, value;
      if (!this.parent) {
        return null;
      }
      ancestors = [];
      ancestor = this.parent;
      results = [];
      while (ancestor.Parent() !== null) {
        if (!matcher) {
          ancestors.push(ancestor);
        } else {
          matched = true;
          for (key in matcher) {
            value = matcher[key];
            if (ancestor[key] !== value) {
              matched = false;
            }
          }
          if (matched) {
            ancestors.push(ancestor);
          }
        }
        results.push(ancestor = ancestor.Parent());
      }
      return results;
    };

    GridManager.prototype.ApplyCentering = function(point) {
      if (this.centered) {
        point.x = (point.x + this.parent.rectangle.width / 2) - (this.sprite.rectangle.width / 2);
      }
      if (this.centerVertical) {
        point.y = (point.y + this.parent.rectangle.height / 2) - (this.sprite.rectangle.height / 2);
      }
      return point;
    };

    GridManager.prototype.ApplyAlignment = function(point) {
      if (this.alignLeft) {
        point.x = 0;
      }
      if (this.alignRight) {
        point.x = point.x + (this.parent.rectangle.width - this.sprite.rectangle.width);
      }
      if (this.alignTop) {
        point.y = 0;
      }
      if (this.alignBottom) {
        point.y = point.y + (this.parent.rectangle.height - this.sprite.rectangle.height);
      }
      return point;
    };

    GridManager.prototype.ResolveAbosolutePosition = function() {
      var basePoint;
      if (this.parent === null) {
        return this.sprite.position;
      }
      basePoint = this.parent.position.Clone();
      basePoint = this.ApplyCentering(basePoint);
      basePoint = this.ApplyAlignment(basePoint);
      basePoint.x += this.position.x;
      basePoint.y += this.position.y;
      basePoint.x += this.margin.left;
      basePoint.y += this.margin.top;
      return basePoint;
    };

    GridManager.prototype.Update = function() {
      this.sprite.position = this.ResolveAbosolutePosition();
      if (this.parent !== null) {
        this.sprite.drawIndex = this.parent.drawIndex + 1;
        return this.sprite.fixed = this.parent.fixed;
      }
    };

    return GridManager;

  })();

  Animation = (function(superClass) {
    extend(Animation, superClass);

    Animation.MixIn(Trashable);

    Animation.MixIn(EventDispatcher);

    Animation.prototype.loop = false;

    Animation.prototype.stopped = false;

    Animation.prototype.intervalTime = 0;

    Animation.prototype.stepTime = 0;

    function Animation() {
      this.InitEventDispatch();
    }

    Animation.prototype.Loop = function() {
      this.loop = true;
      return this;
    };

    return Animation;

  })(Trashable);

  AnimationManager = (function() {
    AnimationManager.prototype.animations = null;

    function AnimationManager(sprite1) {
      this.sprite = sprite1;
      this.animations = [];
    }

    AnimationManager.prototype.Update = function() {
      var anim, cleanedAnims, k, len, ref;
      cleanedAnims = [];
      ref = this.animations;
      for (k = 0, len = ref.length; k < len; k++) {
        anim = ref[k];
        anim.Update();
        if (!anim.trash) {
          cleanedAnims.push(anim);
        }
      }
      return this.animations = cleanedAnims;
    };

    AnimationManager.prototype.SpriteSheet = function(width, height, numberOfFrames, config) {
      var anim;
      if (config == null) {
        config = {
          step: 200
        };
      }
      anim = new SpriteSheetAnimation(this.sprite, width, height, numberOfFrames, config.step);
      this.animations.push(anim);
      return anim;
    };

    AnimationManager.prototype.AtlasFrame = function(atlasId, textureId, frames, config) {
      var anim;
      if (config == null) {
        config = {
          step: 200
        };
      }
      anim = new AtlasFrameAnimation(this.sprite, atlasId, textureId, frames, config.step);
      this.animations.push(anim);
      return anim;
    };

    return AnimationManager;

  })();

  SpriteSheetAnimation = (function(superClass) {
    extend(SpriteSheetAnimation, superClass);

    SpriteSheetAnimation.prototype.index = -1;

    SpriteSheetAnimation.prototype.clipX = 0;

    SpriteSheetAnimation.prototype.clipY = 0;

    SpriteSheetAnimation.prototype.game = null;

    SpriteSheetAnimation.prototype.clipWidth = null;

    SpriteSheetAnimation.prototype.clipHeight = null;

    SpriteSheetAnimation.prototype.numberOfFrames = null;

    SpriteSheetAnimation.prototype.stepTime = null;

    function SpriteSheetAnimation(sprite1, clipWidth, clipHeight, numberOfFrames1, stepTime) {
      this.sprite = sprite1;
      this.clipWidth = clipWidth;
      this.clipHeight = clipHeight;
      this.numberOfFrames = numberOfFrames1;
      this.stepTime = stepTime;
      SpriteSheetAnimation.__super__.constructor.call(this);
      this.loop = true;
      this.game = this.sprite.game;
      this.Reset();
    }

    SpriteSheetAnimation.prototype.Update = function() {
      if (this.stopped) {
        return;
      }
      this.intervalTime += this.game.Loop.updateDelta;
      if (this.intervalTime >= this.stepTime) {
        return this.AdvanceFrame();
      }
    };

    SpriteSheetAnimation.prototype.AdvanceFrame = function() {
      this.intervalTime = 0;
      this.index += 1;
      this.sprite.texture.drawParams.clipX = this.index * this.clipWidth;
      if (this.index >= this.numberOfFrames - 1) {
        if (this.loop) {
          return this.index = -1;
        } else {
          return this.Trash();
        }
      }
    };

    SpriteSheetAnimation.prototype.Stop = function() {
      return this.stopped = true;
    };

    SpriteSheetAnimation.prototype.Start = function() {
      return this.stopped = false;
    };

    SpriteSheetAnimation.prototype.Index = function(index) {
      this.index = index - 1;
      return this.sprite.texture.drawParams.clipX = (this.index + 1) * this.clipWidth;
    };

    SpriteSheetAnimation.prototype.Reset = function() {
      this.intervalTime = 0;
      this.index = -1;
      this.sprite.texture.drawParams.clipX = 0;
      this.sprite.texture.drawParams.clipY = 0;
      this.sprite.texture.drawParams.clipWidth = this.clipWidth;
      this.sprite.texture.drawParams.clipHeight = this.clipHeight;
      this.sprite.Size.width = this.clipWidth;
      return this.sprite.Size.height = this.clipHeight;
    };

    SpriteSheetAnimation.prototype.SyncFrame = function() {
      this.sprite.texture.drawParams.clipX = 0;
      this.sprite.texture.drawParams.clipY = 0;
      this.sprite.texture.drawParams.clipWidth = this.clipWidth;
      this.sprite.texture.drawParams.clipHeight = this.clipHeight;
      this.sprite.Size.width = this.clipWidth;
      return this.sprite.Size.height = this.clipHeight;
    };

    return SpriteSheetAnimation;

  })(Animation);

  AtlasFrameAnimation = (function(superClass) {
    extend(AtlasFrameAnimation, superClass);

    AtlasFrameAnimation.prototype.index = 0;

    function AtlasFrameAnimation(sprite1, atlasId1, textureId1, frames1, stepTime) {
      this.sprite = sprite1;
      this.atlasId = atlasId1;
      this.textureId = textureId1;
      this.frames = frames1;
      this.stepTime = stepTime;
      AtlasFrameAnimation.__super__.constructor.call(this);
      this.game = this.sprite.game;
      this.numberOfFrames = this.frames.length;
    }

    AtlasFrameAnimation.prototype.Update = function() {
      if (this.stopped) {
        return;
      }
      this.intervalTime += this.game.Loop.updateDelta;
      if (this.intervalTime >= this.stepTime) {
        return this.AdvanceFrame();
      }
    };

    AtlasFrameAnimation.prototype.AdvanceFrame = function() {
      this.intervalTime = 0;
      this.index += 1;
      this.sprite.Bind.Atlas(this.atlasId, this.textureId, this.frames[this.index]);
      if (this.index >= this.numberOfFrames - 1) {
        if (this.loop) {
          return this.index = 0;
        } else {
          this.Emit("Finish", new Torch.Event(this.game, {
            animation: this
          }));
          return this.Trash();
        }
      }
    };

    return AtlasFrameAnimation;

  })(Animation);

  BindManager = (function() {
    function BindManager(sprite1) {
      this.sprite = sprite1;
    }

    BindManager.prototype.Texture = function(textureId, optionalParameters) {
      var rawImage, tex, textureIdType;
      tex = null;
      textureIdType = Util.Type(textureId);
      if (textureIdType === "string") {
        rawImage = this.sprite.game.Assets.GetTexture(textureId);
        tex = new Texture(rawImage);
      } else if (textureIdType === "object") {
        tex = new Texture(textureId);
      } else {
        throw new ER.ArgumentError("textureId", textureId, ["string", "object"]);
      }
      this.sprite.Size.Set(tex.width, tex.height);
      return this.sprite.texture = tex;
    };

    BindManager.prototype.Video = function(videoId) {
      var rawVideo, video, videoIdType;
      video = null;
      videoIdType = Util.Type(videoId);
      if (videoIdType === "string") {
        rawVideo = this.sprite.game.Assets.GetVideo(videoId);
        video = new Video(rawVideo);
      } else if (videoIdType === "object") {
        video = new Video(rawVideo);
      } else {
        throw new ER.ArgumentError("videoId", videoId, ["string", "object"]);
      }
      this.sprite.video = video;
      return this.sprite.Size.Set(video.width, video.height);
    };

    BindManager.prototype.Atlas = function(textureId, textureAtlasId, textureName) {
      var atlasItem, textureAtlas;
      this.Texture(textureId);
      textureAtlas = this.sprite.game.Assets.GetTextureAtlas(textureAtlasId);
      atlasItem = textureAtlas.textures[textureName];
      this.sprite.texture.drawParams.clipX = atlasItem.x;
      this.sprite.texture.drawParams.clipY = atlasItem.y;
      this.sprite.texture.drawParams.clipWidth = atlasItem.width;
      this.sprite.texture.drawParams.clipHeight = atlasItem.height;
      return this.sprite.Size.Set(atlasItem.width, atlasItem.height);
    };

    return BindManager;

  })();

  CanvasRenderer = (function() {
    function CanvasRenderer(sprite1) {
      this.sprite = sprite1;
      this.game = this.sprite.game;
      this.previousPosition = new Point(this.sprite.position.x, this.sprite.position.y);
    }

    CanvasRenderer.prototype.Draw = function() {
      var cameraTransform, drawRec;
      drawRec = new Rectangle(this.sprite.position.x, this.sprite.position.y, this.sprite.rectangle.width, this.sprite.rectangle.height);
      drawRec.x = (this.sprite.position.x - this.previousPosition.x) * this.game.Loop.lagOffset + this.previousPosition.x;
      drawRec.y = (this.sprite.position.y - this.previousPosition.y) * this.game.Loop.lagOffset + this.previousPosition.y;
      this.previousPosition = new Point(this.sprite.position.x, this.sprite.position.y);
      cameraTransform = new Point(0, 0);
      if (!this.sprite.fixed) {
        drawRec.x += this.game.Camera.position.x + this.game.Hooks.positionTransform.x;
        drawRec.y += this.game.Camera.position.y + this.game.Hooks.positionTransform.y;
      }
      if (!this.sprite.draw) {
        return;
      }
      switch (this.sprite.torch_render_type) {
        case "Image":
          return this.RenderImageSprite(drawRec);
        case "Line":
          return this.RenderLineSprite(drawRec);
        case "Box":
          return this.RenderBoxSprite(drawRec);
        case "Circle":
          return this.RenderCircleSprite(drawRec);
        case "Polygon":
          return this.RenderPolygonSprite(drawRec);
      }
    };

    CanvasRenderer.prototype.RenderImageSprite = function(drawRec) {
      var canvas, frame, params, ref;
      if ((this.sprite.texture != null) || (this.sprite.video != null)) {
        frame = this.sprite.texture || this.sprite.video;
        params = frame.drawParams;
        canvas = this.game.canvas;
        canvas.save();
        this.SetCanvasStates(canvas, drawRec.x + drawRec.width / 2, drawRec.y + drawRec.height / 2);
        if (this.sprite.Effects.tint.color !== null) {
          canvas.fillStyle = this.sprite.Effects.tint.color;
          canvas.globalAlpha = this.sprite.Effects.tint.opacity;
          canvas.globalCompositeOperation = "destination-atop";
          canvas.fillRect(-drawRec.width / 2, -drawRec.height / 2, drawRec.width, drawRec.height);
          canvas.globalAlpha = this.sprite.opacity;
        }
        canvas.drawImage(((ref = this.sprite.video) != null ? ref.video : void 0) || this.sprite.texture.image, params.clipX, params.clipY, params.clipWidth, params.clipHeight, -drawRec.width / 2 + this.sprite.rotationOffset.x, -drawRec.height / 2 + this.sprite.rotationOffset.y, drawRec.width, drawRec.height);
        if (this.sprite.Body.DEBUG) {
          canvas.fillStyle = this.sprite.Body.DEBUG;
          canvas.globalAlpha = 0.5;
          canvas.fillRect(-drawRec.width / 2, -drawRec.height / 2, drawRec.width, drawRec.height);
        }
        return canvas.restore();
      }
    };

    CanvasRenderer.prototype.RenderLineSprite = function(drawRec) {
      var ref;
      this.game.canvas.save();
      this.game.canvas.globalAlpha = this.sprite.opacity;
      this.game.canvas.strokeStyle = this.sprite.color;
      this.game.canvas.lineWidth = this.sprite.lineWidth;
      if (((ref = this.sprite.DrawTexture) != null ? ref.image : void 0) != null) {
        this.game.canvas.strokeStyle = this.game.canvas.createPattern(this.sprite.DrawTexture.image, "repeat");
      }
      this.game.canvas.beginPath();
      this.game.canvas.moveTo(drawRec.x, drawRec.y);
      this.game.canvas.lineTo(this.sprite.endPosition.x + this.game.Camera.position.x, this.sprite.endPosition.y + this.game.Camera.position.y);
      this.game.canvas.stroke();
      return this.game.canvas.restore();
    };

    CanvasRenderer.prototype.RenderCircleSprite = function(drawRec) {
      this.game.canvas.save();
      this.game.canvas.translate(drawRec.x + this.sprite.radius / 2, drawRec.y + this.sprite.radius / 2);
      this.game.canvas.globalAlpha = this.sprite.opacity;
      this.game.canvas.strokeStyle = this.sprite.strokeColor;
      this.game.canvas.fillStyle = this.sprite.fillColor;
      this.game.canvas.beginPath();
      this.game.canvas.arc(0, 0, this.sprite.radius, this.sprite.startAngle, this.sprite.endAngle, this.sprite.drawDirection === "counterclockwise");
      this.game.canvas.fill();
      this.game.canvas.stroke();
      return this.game.canvas.restore();
    };

    CanvasRenderer.prototype.RenderBoxSprite = function(drawRec) {
      this.game.canvas.save();
      this.SetCanvasStates(this.game.canvas, drawRec.x + this.sprite.width / 2, drawRec.y + this.sprite.height / 2);
      this.game.canvas.beginPath();
      this.game.canvas.rect(-this.sprite.width / 2, -this.sprite.height / 2, this.sprite.width, this.sprite.height);
      this.game.canvas.fill();
      this.game.canvas.stroke();
      return this.game.canvas.restore();
    };

    CanvasRenderer.prototype.RenderPolygonSprite = function(drawRec) {
      var centerPoint, k, len, point, ref;
      this.game.canvas.save();
      centerPoint = Point.GetCenterPoint(this.sprite.points);
      this.SetCanvasStates(this.game.canvas, drawRec.x + centerPoint.x / 2, drawRec.y + centerPoint.y / 2);
      this.game.canvas.beginPath();
      this.game.canvas.moveTo(0, 0);
      ref = this.sprite.points;
      for (k = 0, len = ref.length; k < len; k++) {
        point = ref[k];
        this.game.canvas.lineTo(point.x, point.y);
      }
      this.game.canvas.closePath();
      this.game.canvas.stroke();
      this.game.canvas.fill();
      return this.game.canvas.restore();
    };

    CanvasRenderer.prototype.SetCanvasStates = function(canvas, transFormX, transFormY) {
      if (this.sprite.opacity != null) {
        canvas.globalAlpha = this.sprite.opacity;
      }
      if (this.sprite.strokeColor != null) {
        canvas.strokeStyle = this.sprite.strokeColor;
      }
      if (this.sprite.fillColor != null) {
        canvas.fillStyle = this.sprite.fillColor;
      }
      canvas.translate(transFormX, transFormY);
      return canvas.rotate(this.sprite.rotation);
    };

    return CanvasRenderer;

  })();

  TorchModule(Sprite = (function(superClass) {
    extend(Sprite, superClass);

    Sprite.MixIn(EventDispatcher);

    Sprite.prototype.torch_render_type = "Image";

    Sprite.prototype.torch_type = "Sprite";

    function Sprite(game, x, y) {
      this.InitSprite(game, x, y);
    }

    Sprite.prototype.InitSprite = function(game, x, y) {
      var gameType, xType, yType;
      if (x == null) {
        x = 0;
      }
      if (y == null) {
        y = 0;
      }
      gameType = Util.Type(game);
      xType = Util.Type(x);
      yType = Util.Type(y);
      if ((game == null) || gameType !== "Game") {
        throw new ER.ArgumentError("game", game, ["Torch.Game"]);
      }
      if (xType !== "number") {
        throw new ER.ArgumentError("x", x, ["number"]);
      }
      if (yType !== "number") {
        throw new ER.ArgumentError("y", y, ["number"]);
      }
      this.InitEventDispatch();
      this.game = game;
      this.rectangle = new Rectangle(x, y, 0, 0);
      this.position = new Vector(x, y);
      this.rotationOffset = new Vector(0, 0);
      this.Bind = new BindManager(this);
      this.Collisions = new CollisionManager(this);
      this.Body = new BodyManager(this);
      this.Size = new SizeManager(this);
      this.Events = new EventManager(this);
      this.Effects = new EffectManager(this);
      this.States = new StateMachineManager(this);
      this.Grid = new GridManager(this);
      this.Animations = new AnimationManager(this);
      this.texture = null;
      this.video = null;
      this.fixed = false;
      this.draw = true;
      this.paused = false;
      this.drawIndex = 0;
      this.rotation = 0;
      this.opacity = 1;
      this._torch_add = "Sprite";
      this._torch_uid = "";
      this.events = {};
      this.renderer = new CanvasRenderer(this);
      return game.Add(this);
    };

    Sprite.prototype.UpdateSprite = function() {
      if (this.paused) {
        return;
      }
      this.rectangle.x = this.position.x;
      this.rectangle.y = this.position.y;
      this.Body.Update();
      this.Size.Update();
      this.Events.Update();
      this.States.Update();
      this.Grid.Update();
      this.Animations.Update();
      this.Effects.Update();
      this.Collisions.Update();
      if (this.game.boundary && !this.rectangle.Intersects(this.game.boundary)) {
        return this.Emit("OutOfBounds", new Event(this.game, {
          sprite: this
        }));
      }
    };

    Sprite.prototype.Update = function() {
      return this.UpdateSprite();
    };

    Sprite.prototype.Draw = function() {
      return this.renderer.Draw();
    };

    Sprite.prototype.NotSelf = function(otherSprite) {
      return otherSprite.torch_uid !== this.torch_uid;
    };

    Sprite.prototype.Wrap = function() {
      return this.On("OutOfBounds", (function(_this) {
        return function() {
          if (!_this.game.boundary) {
            return;
          }
          if (_this.position.y < _this.game.boundary.y) {
            _this.position.y = _this.game.boundary.height - _this.rectangle.height;
          }
          if (_this.position.y > _this.game.boundary.height) {
            _this.position.y = _this.game.boundary.y + _this.rectangle.height;
          }
          if (_this.position.x > _this.game.boundary.width) {
            _this.position.x = _this.game.boundary.x + _this.rectangle.width;
          }
          if (_this.position.x < _this.game.boundary.x) {
            return _this.position.x = _this.game.boundary.width - _this.rectangle.width;
          }
        };
      })(this));
    };

    Sprite.prototype.Clone = function() {
      return Object.create(this);
    };

    Sprite.prototype.Center = function() {
      var width, x;
      width = this.game.canvasNode.width;
      x = (width / 2) - (this.rectangle.width / 2);
      this.position.x = x;
      return this;
    };

    Sprite.prototype.CenterVertical = function() {
      var height, y;
      height = this.game.canvasNode.height;
      y = (height / 2) - (this.rectangle.height / 2);
      this.position.y = y;
      return this;
    };

    Sprite.prototype.CollidesWith = function(otherSprite) {
      return new CollisionDetector(this, otherSprite);
    };

    Sprite.prototype.Pause = function(shouldPause) {
      if (shouldPause == null) {
        shouldPause = true;
      }
      return this.paused = shouldPause;
    };

    return Sprite;

  })(GameThing));

  if (typeof document !== "undefined" && document !== null) {
    _measureCanvas = document.createElement("CANVAS");
    _measureCanvas.width = 500;
    _measureCanvas.height = 500;
  } else {
    _measureCanvas = {
      getContext: function() {}
    };
  }

  TorchModule(Text = (function(superClass) {
    extend(Text, superClass);

    Text.prototype.TEXT = true;

    Text.measureCanvas = _measureCanvas.getContext("2d");

    Text.property('fontSize', {
      get: function() {
        return this._fontSize;
      },
      set: function(fontSize) {
        this._fontSize = fontSize;
        return Util.Function((function(_this) {
          return function() {
            return _this.Render();
          };
        })(this)).Defer();
      }
    });

    Text.property('font', {
      get: function() {
        return this._font;
      },
      set: function(font) {
        this._font = font;
        return Util.Function((function(_this) {
          return function() {
            return _this.Render();
          };
        })(this)).Defer();
      }
    });

    Text.property('fontWeight', {
      get: function() {
        return this._fontWeight;
      },
      set: function(fontWeight) {
        this._fontWeight = fontWeight;
        return Util.Function((function(_this) {
          return function() {
            return _this.Render();
          };
        })(this)).Defer();
      }
    });

    Text.property('color', {
      get: function() {
        return this._color;
      },
      set: function(color) {
        this._color = color;
        return Util.Function((function(_this) {
          return function() {
            return _this.Render();
          };
        })(this)).Defer();
      }
    });

    Text.property('text', {
      get: function() {
        return this._text;
      },
      set: function(text) {
        this._text = text;
        return Util.Function((function(_this) {
          return function() {
            return _this.Render();
          };
        })(this)).Defer();
      }
    });

    function Text(game, x, y, data) {
      this.InitText(game, x, y, data);
    }

    Text.prototype.InitText = function(game, x, y, data) {
      this.InitSprite(game, x, y);
      this.data = data;
      this._font = "Arial";
      this._fontSize = 16;
      this._fontWeight = "";
      this._color = "#2b4531";
      this._text = "";
      this.width = 100;
      this.height = 100;
      this.Size.scale = {
        width: 1,
        height: 1
      };
      return this.Init();
    };

    Text.prototype.Init = function() {
      if (this.data.font) {
        this._font = this.data.font;
      }
      if (this.data.fontSize) {
        this._fontSize = this.data.fontSize;
      }
      if (this.data.fontWeight) {
        this._fontWeight = this.data.fontWeight;
      }
      if (this.data.color) {
        this._color = this.data.color;
      }
      if (this.data.text) {
        this._text = this.data.text;
      }
      if (this.data.rectangle) {
        this.rectangle = this.data.rectangle;
      }
      if (this.data.buffHeight) {
        this.buffHeight = this.data.buffHeight;
      }
      return this.Render();
    };

    Text.prototype.Render = function() {
      var canvas, cnv, image;
      cnv = document.createElement("CANVAS");
      Text.measureCanvas.font = this._fontSize + "px " + this._font;
      cnv.width = Text.measureCanvas.measureText(this._text).width;
      cnv.height = this._fontSize;
      if (this.buffHeight) {
        cnv.height += this.buffHeight;
      }
      canvas = cnv.getContext("2d");
      canvas.fillStyle = this._color;
      canvas.font = this._fontWeight + " " + this._fontSize + "px " + this._font;
      canvas.fillText(this._text, 0, cnv.height);
      image = new Image();
      image.src = cnv.toDataURL();
      image.onload = (function(_this) {
        return function() {
          return _this.Bind.Texture(image);
        };
      })(this);
      this.rectangle.width = cnv.width;
      return this.rectangle.height = this._fontSize;
    };

    Text.prototype.Update = function() {
      return Text.__super__.Update.call(this);
    };

    return Text;

  })(Sprite));

  TorchModule(BitmapText = (function() {
    function BitmapText() {}

    return BitmapText;

  })());


  /*
      We need to have circles, rectangles, lines, and polys
   */

  Shapes = {
    name: "Shapes"
  };

  TorchModule(Shapes);

  Shapes.Circle = (function(superClass) {
    extend(Circle, superClass);

    Circle.prototype.torch_render_type = "Circle";

    Circle.prototype.radius = 0;

    Circle.prototype.fillColor = "black";

    Circle.prototype.strokeColor = "black";

    Circle.prototype.startAngle = 0;

    Circle.prototype.endAngle = 2 * Math.PI;

    Circle.prototype.drawDirection = "clockwise";

    function Circle(game, x, y, radius, fillColor, strokeColor) {
      if (fillColor == null) {
        fillColor = "black";
      }
      if (strokeColor == null) {
        strokeColor = "black";
      }
      this.InitSprite(game, x, y);
      this.radius = radius;
      this.fillColor = fillColor;
      this.strokeColor = strokeColor;
    }

    return Circle;

  })(Sprite);

  Shapes.Line = (function(superClass) {
    extend(Line, superClass);

    Line.prototype.torch_render_type = "Line";

    Line.prototype.color = "black";

    Line.prototype.lineWidth = 1;

    Line.prototype.endPosition = null;

    function Line(game, x, y, endX, endY, color1, config) {
      this.color = color1;
      this.InitSprite(game, x, y);
      this.endPosition = new Point(endX, endY);
      Util.Object(this).Extend(config);
    }

    return Line;

  })(Sprite);

  Shapes.Box = (function(superClass) {
    extend(Box, superClass);

    Box.prototype.torch_render_type = "Box";

    Box.prototype.torch_shape = true;

    Box.prototype.fillColor = "black";

    Box.prototype.strokeColor = "black";

    Box.prototype.width = 0;

    Box.prototype.height = 0;

    function Box(game, x, y, width, height, fillColor, strokeColor) {
      if (fillColor == null) {
        fillColor = "black";
      }
      if (strokeColor == null) {
        strokeColor = "black";
      }
      this.InitSprite(game, x, y);
      this.width = width;
      this.height = height;
      this.fillColor = fillColor;
      this.strokeColor = strokeColor;
    }

    return Box;

  })(Sprite);

  Shapes.Polygon = (function(superClass) {
    extend(Polygon, superClass);

    Polygon.prototype.torch_render_type = "Polygon";

    function Polygon(game, x, y, points1, fillColor1, strokeColor1) {
      this.points = points1;
      this.fillColor = fillColor1;
      this.strokeColor = strokeColor1;
      this.InitSprite(game, x, y);
    }

    Polygon.Regular = function(game, x, y, sides, width, fillColor, strokeColor) {
      var angle, angleInterval, points, px, py, shape;
      angleInterval = (Math.PI * 2) / sides;
      points = [];
      angle = 0;
      while (angle <= Math.PI * 2) {
        px = Math.cos(angle) * width;
        py = Math.sin(angle) * width;
        points.push(new Point(px, py));
        angle += angleInterval;
      }
      shape = new Shapes.Polygon(game, x, y, points, fillColor, strokeColor);
      shape.rectangle.width = shape.rectangle.height = width;
      return shape;
    };

    return Polygon;

  })(Sprite);

  TorchModule(SpriteGroup = (function(superClass) {
    extend(SpriteGroup, superClass);

    SpriteGroup.MixIn(EventDispatcher);

    SpriteGroup.prototype.sprites = null;

    SpriteGroup.prototype.position = null;

    function SpriteGroup(game1, x, y) {
      this.game = game1;
      this.InitEventDispatch();
      this.game.Add(this);
      this.sprites = [];
      this.position = new Vector(x, y);
    }

    SpriteGroup.prototype.Update = function() {
      var filtered, k, len, ref, sprite;
      filtered = [];
      ref = this.sprites;
      for (k = 0, len = ref.length; k < len; k++) {
        sprite = ref[k];
        if (!sprite.trash) {
          filtered.push(sprite);
        }
      }
      this.sprites = filtered;
      if (filtered.length <= 0) {
        return this.Emit("Empty", new Event(this.game, {
          spriteGroup: this
        }));
      }
    };

    SpriteGroup.prototype.Every = function(calback) {
      var k, len, ref, results, sprite;
      ref = this.sprites;
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        sprite = ref[k];
        results.push(calback(sprite));
      }
      return results;
    };

    SpriteGroup.prototype.Grid = function(spriteToCopy, rows, columns, padding) {
      var copy, distribution, first, height, i, index, j, results, width;
      if (padding == null) {
        padding = 0;
      }
      distribution = null;
      if (Util.Type(spriteToCopy) !== "array") {
        first = new spriteToCopy(this.game, this.position.x, this.position.y);
      } else {
        distribution = spriteToCopy;
        first = new distribution[0](this.game, this.position.x, this.position.y);
      }
      width = first.rectangle.width;
      height = first.rectangle.height;
      first.Trash();
      width += padding;
      height += padding;
      i = 0;
      results = [];
      while (i < rows) {
        j = 0;
        while (j < columns) {
          if (distribution === null) {
            copy = new spriteToCopy(this.game, this.position.x + (i * width), this.position.y + (j * height));
          } else {
            index = Util.Math.RandomInRange(0, distribution.length - 1);
            index = Math.floor(index);
            console.log(distribution, index);
            copy = new distribution[index](this.game, this.position.x + (i * width), this.position.y + (j * height));
          }
          this.sprites.push(copy);
          j++;
        }
        results.push(i++);
      }
      return results;
    };

    return SpriteGroup;

  })(GameThing));

  CollisionDetector = (function() {
    function CollisionDetector(sprite1, otherSprite1) {
      this.sprite = sprite1;
      this.otherSprite = otherSprite1;
    }

    CollisionDetector.prototype.AABB = function() {
      return new AABB(this.sprite, this.otherSprite).Execute();
    };

    CollisionDetector.prototype.Circle = function() {
      return new Circle(this.sprite, this.otherSprite).Execute();
    };

    CollisionDetector.prototype.SAT = function() {
      return new SAT(this.sprite, this.otherSprite).Execute();
    };

    return CollisionDetector;

  })();

  AABB = (function() {
    function AABB(sprite1, otherSprite1) {
      this.sprite = sprite1;
      this.otherSprite = otherSprite1;
    }

    AABB.prototype.Execute = function() {
      return this.sprite.rectangle.Intersects(this.otherSprite.rectangle);
    };

    return AABB;

  })();

  Circle = (function() {
    function Circle(sprite1, otherSprite1) {
      this.sprite = sprite1;
      this.otherSprite = otherSprite1;
    }

    Circle.prototype.Execute = function() {
      var circle1, circle2, distance, dx, dy;
      circle1 = {
        radius: this.sprite.Width(),
        x: this.sprite.Position("x"),
        y: this.sprite.Position("y")
      };
      circle2 = {
        radius: this.otherSprite.Width(),
        x: this.otherSprite.Position("x"),
        y: this.otherSprite.Position("y")
      };
      dx = circle1.x - circle2.x;
      dy = circle1.y - circle2.y;
      distance = Math.sqrt(dx * dx + dy * dy);
      if (distance < circle1.radius + circle2.radius) {
        return true;
      }
      return false;
    };

    return Circle;

  })();

  Collision = {
    AABB: 1,
    Circle: 2,
    SAT: 3
  };

  CollisionManager = (function() {
    CollisionManager.prototype.mode = Collision.AABB;

    CollisionManager.prototype.sprite = null;

    CollisionManager.prototype.filter = null;

    CollisionManager.prototype.limit = null;

    CollisionManager.prototype.enabled = false;

    function CollisionManager(sprite1) {
      this.sprite = sprite1;
      this.filter = {};
      this.game = this.sprite.game;
    }

    CollisionManager.prototype.Monitor = function() {
      return this.enabled = true;
    };

    CollisionManager.prototype.NotFiltered = function(sprite) {
      var key, ref, ref1, value;
      ref = this.game.filter;
      for (key in ref) {
        value = ref[key];
        if (key === "__type__") {
          if (value.constructor.name === sprite.constructor.name) {
            return false;
          }
        } else {
          if (value === sprite[key]) {
            return false;
          }
        }
      }
      ref1 = this.filter;
      for (key in ref1) {
        value = ref1[key];
        if (key === "__type__") {
          if (value.constructor.name === sprite.constructor.name) {
            return false;
          }
        } else {
          if (value === sprite[key]) {
            return false;
          }
        }
      }
      return true;
    };

    CollisionManager.prototype.InLimit = function(sprite) {
      var key, ref, value;
      ref = this.limit;
      for (key in ref) {
        value = ref[key];
        if (key === "__type__") {
          if (value.constructor.name === sprite.constructor.name) {
            return true;
          }
        } else {
          if (value === sprite[key]) {
            return true;
          }
        }
      }
      return false;
    };

    CollisionManager.prototype.Valid = function(sprite) {
      if (this.limit !== null) {
        return this.InLimit(sprite);
      }
      return this.NotFiltered(sprite);
    };

    CollisionManager.prototype.Filter = function(_filter) {
      return this.filter = _filter;
    };

    CollisionManager.prototype.Limit = function(_limit) {
      return this.limit = _limit;
    };

    CollisionManager.prototype.Mode = function(_mode) {
      var mode;
      return mode = _mode;
    };

    CollisionManager.prototype.Update = function() {
      var anyCollisions, collisionData, collisionDetected, k, len, otherSprite, ref;
      if (!this.sprite.game || !this.enabled) {
        return;
      }
      this.game = this.sprite.game;
      anyCollisions = false;
      ref = this.game.things;
      for (k = 0, len = ref.length; k < len; k++) {
        otherSprite = ref[k];
        if (otherSprite.torch_type === "Sprite") {
          if (this.sprite.NotSelf(otherSprite) && this.Valid(otherSprite)) {
            collisionDetected = false;
            collisionData = {};
            switch (this.mode) {
              case Collision.AABB:
                collisionData = this.sprite.CollidesWith(otherSprite).AABB();
                collisionDetected = collisionData !== false;
            }
            if (collisionDetected) {
              collisionData.self = this.sprite;
              collisionData.collider = otherSprite;
              anyCollisions === true;
              this.sprite.Emit("Collision", new Torch.Event(this.game, {
                collisionData: collisionData
              }));
            }
          }
        }
      }
      return this.sprite.Emit("NoCollision", new Torch.Event(this.game, {}));
    };

    CollisionManager.prototype.SimpleCollisionHandle = function(event, sink) {
      var offset, touching;
      if (sink == null) {
        sink = 1;
      }
      offset = event.collisionData;
      touching = {
        left: false,
        right: false,
        top: false,
        bottom: false
      };
      if (offset.vx < offset.halfWidths && offset.vy < offset.halfHeights) {
        if (offset.x < offset.y) {
          if (offset.vx > 0) {
            event.collisionData.self.position.x += offset.x * sink;
            touching.left = true;
          } else if (offset.vx < 0) {
            event.collisionData.self.position.x -= offset.x * sink;
            touching.right = true;
          }
        } else if (offset.x > offset.y) {
          if (offset.vy > 0) {
            event.collisionData.self.position.y += offset.y * sink;
            touching.top = true;
          } else if (offset.vy < 0) {
            event.collisionData.self.position.y -= offset.y * sink;
            touching.bottom = true;
          }
        }
      }
      return touching;
    };

    CollisionManager.prototype.CastRay = function() {};

    return CollisionManager;

  })();

  Loop = (function() {
    function Loop(game1) {
      this.game = game1;
      this.fps = 50;
      this.frameTime = 1000 / this.fps;
      this.lag = 0;
      this.updateDelta = 0;
      this.drawDelta = 0;
      this.lagOffset;
    }

    Loop.prototype.Update = function() {
      this.game.update(this.game);
      this.game.State.Update();
      this.game.GamePads.Update();
      return this.game.UpdateThings();
    };

    Loop.prototype.Draw = function() {
      this.game.draw(this.game);
      return this.game.DrawThings();
    };

    Loop.prototype.AdvanceFrame = function(timestamp) {
      var elapsed;
      if (this.game.time === void 0) {
        this.game.time = timestamp;
      }
      this.game.deltaTime = Math.round(timestamp - this.game.time);
      this.game.time = timestamp;
      elapsed = this.game.deltaTime;
      this.drawDelta = elapsed;
      this.updateDelta = this.frameTime;
      if (elapsed > 1000) {
        elapsed = this.frameTime;
      }
      this.lag += elapsed;
      while (this.lag >= this.frameTime) {
        this.Update();
        this.lag -= this.frameTime;
      }
      this.lagOffset = this.lag / this.frameTime;
      this.Draw();
      return window.requestAnimationFrame((function(_this) {
        return function(timestamp) {
          return _this.AdvanceFrame(timestamp);
        };
      })(this));
    };

    Loop.prototype.Run = function(timestamp) {
      return this.AdvanceFrame(0);
    };

    return Loop;

  })();

  AssetManager = (function() {
    AssetManager.prototype.game = null;

    AssetManager.prototype.textures = null;

    AssetManager.prototype.audio = null;

    AssetManager.prototype.video = null;

    AssetManager.prototype.files = null;

    AssetManager.prototype.textureAtlases = null;

    function AssetManager(game1) {
      this.game = game1;
      this.textures = {};
      this.audio = {};
      this.video = {};
      this.textureAtlases = {};
      this.files = {};
    }

    AssetManager.prototype.GetTexture = function(id) {
      return this.textures[id];
    };

    AssetManager.prototype.GetAudio = function(id) {
      return this.audio[id];
    };

    AssetManager.prototype.GetVideo = function(id) {
      return this.video[id];
    };

    AssetManager.prototype.GetTextureAtlas = function(id) {
      return this.textureAtlases[id];
    };

    AssetManager.prototype.GetFile = function(id) {
      return this.files[id];
    };

    return AssetManager;

  })();

  LoadType = Util.Enum("Texture", "Audio", "Video", "File", "TextureAtlas");

  LoadJob = (function() {
    function LoadJob(loadType, id1, path1) {
      this.loadType = loadType;
      this.id = id1;
      this.path = path1;
    }

    return LoadJob;

  })();

  Load = (function() {
    Load.MixIn(EventDispatcher);

    function Load(game1) {
      this.game = game1;
      this.InitEventDispatch();
      this.files = this.game.Assets.files;
      this.textures = this.game.Assets.textures;
      this.audio = this.game.Assets.audio;
      this.video = this.game.Assets.video;
      this.textureAtlases = this.game.Assets.textureAtlases;
      this.loadJobs = [];
      this.itemsLeftToLoad = 0;
      this.progress = 0;
      this.loaded = false;
      this.loadLog = "";
    }

    Load.prototype.Audio = function(path, id) {
      return this.loadJobs.push(new LoadJob(LoadType.Audio, id, path));
    };

    Load.prototype.Texture = function(path, id) {
      return this.loadJobs.push(new LoadJob(LoadType.Texture, id, path));
    };

    Load.prototype.TextureAtlas = function(path, id) {
      return this.loadJobs.push(new LoadJob(LoadType.TextureAtlas, id, path));
    };

    Load.prototype.Video = function(path, id) {
      return this.loadJobs.push(new LoadJob(LoadType.Video, id, path));
    };

    Load.prototype.File = function(path, id) {
      return this.loadJobs.push(new LoadJob(LoadType.File, id, path));
    };

    Load.prototype.Font = function(path, name) {
      var cssFontRule, manualLoader, style;
      style = document.createElement("style");
      manualLoader = document.createElement("p");
      cssFontRule = "@font-face{\n    font-family: " + name + ";\n    src: url(" + path + ");\n}";
      cssFontRule = document.createTextNode(cssFontRule);
      style.appendChild(cssFontRule);
      manualLoader.innerHTML = "TEST";
      manualLoader.style.fontFamily = name;
      document.head.appendChild(style);
      return document.body.appendChild(manualLoader);
    };

    Load.prototype.LoadItemFinished = function() {
      var ref, timeToLoad;
      this.itemsLeftToLoad -= 1;
      this.progress = (this.totalLoad - this.itemsLeftToLoad) / this.totalLoad;
      this.game.Emit("LoadProgressed", new Event(this.game, {
        progress: this.progress
      }));
      if (this.itemsLeftToLoad <= 0) {
        if ((ref = document.getElementsByClassName("font-loader")[0]) != null) {
          ref.remove();
        }
        timeToLoad = (new Date().getTime() - this.startTime) / 1000;
        this.Emit("LoadFinished", new Event(this.game, {
          timeToLoad: timeToLoad
        }));
        return console.log("%c" + this.game.name + " loaded in " + timeToLoad + "s", "background-color:green;\ncolor:white;\npadding:2px;\npadding-right:5px;\npadding-left:5px");
      }
    };

    Load.prototype.Load = function() {
      var e, k, len, loadJob, ref, results;
      this.totalLoad = this.loadJobs.length;
      this.itemsLeftToLoad = this.totalLoad;
      this.startTime = new Date().getTime();
      try {
        ref = this.loadJobs;
        results = [];
        for (k = 0, len = ref.length; k < len; k++) {
          loadJob = ref[k];
          switch (loadJob.loadType) {
            case LoadType.Texture:
              results.push(this.LoadTexture(loadJob));
              break;
            case LoadType.Video:
              results.push(this.LoadVideo(loadJob));
              break;
            case LoadType.Audio:
              results.push(this.LoadAudio(loadJob));
              break;
            case LoadType.File:
              results.push(this.LoadFile(loadJob));
              break;
            case LoadType.TextureAtlas:
              results.push(this.LoadTextureAtlas(loadJob));
              break;
            default:
              results.push(void 0);
          }
        }
        return results;
      } catch (error1) {
        e = error1;
        console.log("%c" + this.game.name + " could not load!", "background-color:" + Color.Ruby + ";\ncolor:white;\npadding:2px;\npadding-right:5px;\npadding-left:5px");
        return Torch.FatalError(e);
      }
    };

    Load.prototype.LoadTexture = function(loadJob) {
      var im;
      im = new Image();
      im.src = loadJob.path;
      this.textures[loadJob.id] = im;
      return im.onload = (function(_this) {
        return function() {
          return _this.LoadItemFinished();
        };
      })(this);
    };

    Load.prototype.LoadTextureAtlas = function(loadJob) {
      var loader;
      loader = new Torch.AjaxLoader(loadJob.path, Torch.AjaxData.Text);
      loader.loadJob = loadJob;
      loader.Finish((function(_this) {
        return function(data, loader) {
          _this.LoadItemFinished();
          return _this.textureAtlases[loader.loadJob.id] = JSON.parse(data);
        };
      })(this));
      return loader.Load();
    };

    Load.prototype.LoadVideo = function(loadJob) {
      var video;
      video = document.createElement("video");
      video.src = loadJob.path;
      this.video[loadJob.id] = video;
      return video.addEventListener("loadeddata", (function(_this) {
        return function() {
          return _this.LoadItemFinished();
        };
      })(this));
    };

    Load.prototype.LoadAudio = function(loadJob) {
      var loader;
      loader = new Torch.AjaxLoader(loadJob.path, Torch.AjaxData.ArrayBuffer);
      loader.loadJob = loadJob;
      loader.Finish((function(_this) {
        return function(data, loader) {
          _this.audio[loader.loadJob.id] = {};
          _this.audio[loader.loadJob.id].encodedAudioData = data;
          return _this.game.Audio.DecodeAudioData(data, function(buffer) {
            _this.audio[loader.loadJob.id].audioData = buffer;
            return _this.LoadItemFinished();
          });
        };
      })(this));
      return loader.Load();
    };

    Load.prototype.LoadFile = function(loadJob) {
      var loader;
      loader = new Torch.AjaxLoader(loadJob.path, Torch.AjaxData.Text);
      loader.loadJob = loadJob;
      loader.Finish((function(_this) {
        return function(data, loader) {
          _this.LoadItemFinished();
          return _this.files[loader.loadJob.id] = data;
        };
      })(this));
      return loader.Load();
    };

    return Load;

  })();

  Timer = (function() {
    function Timer(game1) {
      this.game = game1;
    }

    Timer.prototype.SetFutureEvent = function(timeToOccur, handle) {
      var ev;
      ev = new FutureEvent(timeToOccur, handle, this.game);
      this.game.Add(ev);
      return ev;
    };

    Timer.prototype.SetScheduledEvent = function(interval, handle) {
      var ev;
      ev = new ScheduledEvent(interval, handle, this.game);
      this.game.Add(ev);
      return ev;
    };

    return Timer;

  })();

  FutureEvent = (function(superClass) {
    extend(FutureEvent, superClass);

    function FutureEvent(timeToOccur1, handle1, game1) {
      this.timeToOccur = timeToOccur1;
      this.handle = handle1;
      this.game = game1;
      this.time = 0;
    }

    FutureEvent.prototype.Update = function() {
      this.time += this.game.Loop.updateDelta;
      if (this.time >= this.timeToOccur) {
        if (this.handle !== null && this.handle !== void 0) {
          this.handle();
          return this.handle = null;
        }
      }
    };

    return FutureEvent;

  })(GameThing);

  ScheduledEvent = (function(superClass) {
    extend(ScheduledEvent, superClass);

    function ScheduledEvent(interval1, handle1, game1) {
      this.interval = interval1;
      this.handle = handle1;
      this.game = game1;
      this.elapsedTime = 0;
    }

    ScheduledEvent.prototype.Update = function() {
      this.elapsedTime += this.game.Loop.updateDelta;
      if (this.elapsedTime >= this.interval) {
        if (this.handle != null) {
          this.handle();
        }
        return this.elapsedTime = 0;
      }
    };

    return ScheduledEvent;

  })(GameThing);

  Mouse = (function() {
    function Mouse(game1) {
      this.game = game1;
      this.x = 0;
      this.y = 0;
      this.down = false;
    }

    Mouse.prototype.SetMousePos = function(c, evt) {
      var rect;
      rect = c.getBoundingClientRect();
      this.x = evt.clientX - rect.left;
      return this.y = evt.clientY - rect.top;
    };

    Mouse.prototype.GetRectangle = function() {
      return new Rectangle(this.x, this.y, 5, 5);
    };

    Mouse.prototype.SetCursor = function(textureId) {
      var texture;
      texture = this.game.Assets.GetTexture(textureId);
      return this.game.canvasNode.style.cursor = "url(" + texture.src + "), auto";
    };

    return Mouse;

  })();

  Camera = (function() {
    Camera.prototype.position = null;

    Camera.prototype._jerkFollow = null;

    function Camera(game1) {
      this.game = game1;
      this.position = new Point(0, 0);
      this.Viewport = new Viewport(this);
    }

    Camera.prototype.JerkFollow = function(sprite, offset, config) {
      if (offset == null) {
        offset = 5;
      }
      if (config == null) {
        config = {
          maxLeft: -500,
          maxRight: 2000,
          maxTop: -500,
          maxBottom: 2000
        };
      }
      this._jerkFollow = new JerkFollow(this, sprite, offset, config);
      return this.game.Add(this._jerkFollow);
    };

    return Camera;

  })();

  Viewport = (function() {
    Viewport.prototype.width = 0;

    Viewport.prototype.height = 0;

    Viewport.prototype.maxWidth = 0;

    Viewport.prototype.maxHeight = 0;

    function Viewport(camera) {
      this.camera = camera;
      this.maxWidth = this.width = window.innerWidth;
      this.maxHeight = this.height = window.innerHeight;
      this.rectangle = new Rectangle(this.camera.position.x, this.camera.position.y, this.width, this.height);
    }

    Viewport.prototype.Update = function() {
      this.rectangle.x = this.camera.position.x;
      this.rectangle.y = this.camera.position.y;
      this.rectangle.width = this.width;
      return this.rectangle.height = this.height;
    };

    return Viewport;

  })();

  JerkFollow = (function(superClass) {
    extend(JerkFollow, superClass);

    JerkFollow.prototype.boundLeft = 0;

    JerkFollow.prototype.boundRight = 0;

    JerkFollow.prototype.boundTop = 0;

    JerkFollow.prototype.boundBottom = 0;

    JerkFollow.prototype.Inc = 0;

    function JerkFollow(camera, sprite1, offset, config1) {
      var v;
      this.camera = camera;
      this.sprite = sprite1;
      this.config = config1;
      v = this.camera.Viewport;
      this.game = this.camera.game;
      this.Inc = v.width / offset;
      this.boundLeft = v.width / offset;
      this.boundRight = v.width - this.boundLeft;
      this.boundTop = 0;
    }

    JerkFollow.prototype.Update = function() {
      if (this.sprite.position.x >= this.boundRight) {
        if (this.sprite.position.x >= this.config.maxRight) {
          this.sprite.position.x = this.boundRight;
          return;
        }
        this.boundRight += this.Inc;
        this.boundLeft += this.Inc;
        this.game.Tweens.Tween(this.camera.position, 500, Torch.Easing.Smooth).To({
          x: this.camera.position.x - this.Inc
        });
      }
      if (this.sprite.position.x <= this.boundLeft) {
        if (this.sprite.position.x <= this.config.maxLeft) {
          this.sprite.position.x = this.boundLeft;
          return;
        }
        this.boundRight -= this.Inc;
        this.boundLeft -= this.Inc;
        this.game.Tweens.Tween(this.camera.position, 500, Torch.Easing.Smooth).To({
          x: this.camera.position.x + this.Inc
        });
      }
      if (this.sprite.position.y <= this.boundTop) {
        if (this.sprite.position.y <= this.config.maxTop) {
          this.sprite.position.y = this.boundTop;
          return;
        }
        this.boundTop -= this.Inc;
        this.boundBottom -= this.Inc;
        return this.game.Tweens.Tween(this.camera.position, 500, Torch.Easing.Smooth).To({
          x: this.camera.position.y + this.Inc
        });
      }
    };

    return JerkFollow;

  })(GameThing);

  Layer = (function() {
    function Layer(drawIndex) {
      this.drawIndex = drawIndex;
      this.children = [];
      this.mapIndex - this.drawIndex;
    }

    Layer.prototype.DrawIndex = function(index) {
      var child, k, len, ref;
      if (!index) {
        return this.drawIndex;
      }
      this.drawIndex = index;
      ref = this.children;
      for (k = 0, len = ref.length; k < len; k++) {
        child = ref[k];
        child.DrawIndex(index);
      }
      return this;
    };

    Layer.prototype.Add = function(child) {
      child.DrawIndex(this.index);
      return this.children.push(child);
    };

    return Layer;

  })();

  Layers = (function() {
    function Layers(game1) {
      this.game = game1;
      this.layers = [];
      this.layerMap = {};
    }

    Layers.prototype.Add = function(layerName) {
      var k, layer, len, name, results;
      layer = null;
      if (typeof layerName === "string") {
        layer = new Layer(this.layers.length);
        this.layerName[layerName] = layer;
        return this.layers.add(layer);
      } else {
        results = [];
        for (k = 0, len = layerName.length; k < len; k++) {
          name = layerName[k];
          layer = new Layer(this.layers.length);
          this.layerMap[name] = layer;
          results.push(this.layers.add(layer));
        }
        return results;
      }
    };

    Layers.prototype.Remove = function(layerName, tryToFill) {
      var cleanedLayers, index, item, k, l, layer, len, ref, results;
      if (!this.layerMap[layerName]) {
        return Torch.FatalError("Unable to remove layer '" + layerName + "'. Layer does not exist");
      } else {
        cleanedLayers = [];
        layer = layerMap[layerName];
        layer.Trash();
        delete this.layerMap[layerName];
        ref = this.layers;
        results = [];
        for (index = k = 0, len = ref.length; k < len; index = ++k) {
          item = ref[index];
          l = cleanedLayers[index];
          if (index !== layer.mapIndex) {
            cleanedLayers.push(l);
            if (tryToFill) {
              results.push(l.DrawIndex(l.DrawIndex() - 1));
            } else {
              results.push(void 0);
            }
          } else {
            results.push(void 0);
          }
        }
        return results;
      }
    };

    Layers.prototype.Get = function(layerName) {
      if (!this.layerMap[layerName]) {
        return Torch.FatalError("Unable to get layer '" + layerName + "'. Layer does not exist");
      } else {
        return this.layerMap[layerName];
      }
    };

    return Layers;

  })();

  Key = (function() {
    Key.MixIn(EventDispatcher);

    Key.prototype.down = false;

    function Key(keyCode1) {
      this.keyCode = keyCode1;
      this.InitEventDispatch();
    }

    return Key;

  })();

  Keys = (function() {
    Keys.MixIn(EventDispatcher);

    function Keys() {
      this.specialKeys = {
        8: "Delete",
        9: "Tab",
        13: "Enter",
        16: "Shift",
        17: "Control",
        18: "Alt",
        19: "PauseBreak",
        20: "CapsLock",
        27: "Escape",
        32: "Space",
        33: "PageUp",
        34: "PageDown",
        35: "End",
        36: "Home",
        37: "LeftArrow",
        38: "UpArrow",
        39: "RightArrow",
        40: "DownArrow",
        45: "Insert",
        46: "Delete2",
        48: "Num0",
        49: "Num1",
        50: "Num2",
        51: "Num3",
        52: "Num4",
        53: "Num5",
        54: "Num6",
        55: "Num7",
        56: "Num8",
        57: "Num9",
        96: "NumPad0",
        97: "NumPad1",
        98: "NumPad2",
        99: "NumPad3",
        100: "NumPad4",
        101: "NumPad5",
        102: "NumPad6",
        103: "NumPad7",
        104: "NumPad8",
        105: "NumPad9",
        106: "NumPadMultiply",
        107: "NumPadPlus",
        109: "NumPadMinus",
        110: "NumPadPeriod",
        111: "NumPadDivide",
        112: "F1",
        113: "F2",
        114: "F3",
        115: "F4",
        116: "F5",
        117: "F6",
        118: "F7",
        119: "F8",
        120: "F9",
        121: "F10",
        122: "F11",
        123: "F12",
        144: "NumLock",
        145: "ScrollLock",
        186: "Colon",
        187: "NumPlus",
        188: "Comma",
        189: "NumMinus",
        190: "Period",
        191: "ForwardSlash",
        192: "Tilda",
        219: "BracketLeft",
        221: "BracketRight",
        220: "BackSlash",
        222: "Quote"
      };
      this.InitKeys();
    }

    Keys.prototype.SpecialKey = function(keyCode) {
      var key, ref, value;
      ref = this.specialKeys;
      for (key in ref) {
        value = ref[key];
        if (keyCode.toString() === key.toString()) {
          return this[value];
        }
      }
      return null;
    };

    Keys.prototype.InitKeys = function() {
      var _char, _keys, i, keyCode, ref, results, value;
      _keys = this;
      i = 0;
      while (i < 230) {
        _char = String.fromCharCode(i).toUpperCase();
        _keys[_char] = new Key(i);
        i++;
      }
      ref = this.specialKeys;
      results = [];
      for (keyCode in ref) {
        value = ref[keyCode];
        results.push(_keys[value] = new Key(keyCode));
      }
      return results;
    };

    return Keys;

  })();

  Tween = (function(superClass) {
    extend(Tween, superClass);

    Tween.MixIn(EventDispatcher);

    Tween.prototype.objectToTween = null;

    Tween.prototype.tweenProperties = null;

    Tween.prototype.originalObjectValues = null;

    Tween.prototype.elapsedTime = 0;

    Tween.prototype.timeTweenShouldTake = 0;

    Tween.prototype.easing = null;

    Tween.prototype.repeat = false;

    Tween.prototype.cycle = false;

    function Tween(game1, objectToTween, tweenProperties1, timeTweenShouldTake1, easing1) {
      var key, ref, value;
      this.game = game1;
      this.objectToTween = objectToTween;
      this.tweenProperties = tweenProperties1;
      this.timeTweenShouldTake = timeTweenShouldTake1;
      this.easing = easing1;
      this.InitEventDispatch();
      this.game.Tweens.tweens.push(this);
      this.game.Add(this);
      this.originalObjectValues = {};
      ref = this.tweenProperties;
      for (key in ref) {
        value = ref[key];
        this.originalObjectValues[key] = this.objectToTween[key];
      }
    }

    Tween.prototype.Update = function() {
      var easedTime, key, normalizedTime, ref, tmp, value;
      normalizedTime = this.elapsedTime / this.timeTweenShouldTake;
      easedTime = this.Ease(normalizedTime);
      ref = this.tweenProperties;
      for (key in ref) {
        value = ref[key];
        this.objectToTween[key] = (this.tweenProperties[key] * easedTime) + (this.originalObjectValues[key] * (1 - easedTime));
      }
      this.elapsedTime += this.game.Loop.updateDelta;
      if (this.elapsedTime >= this.timeTweenShouldTake) {
        this.Emit("Finish", new Torch.Event(this.game, {
          tween: this
        }));
        if (this.cycle) {
          this.elapsedTime = 0;
          tmp = Object.create(this.originalObjectValues);
          this.originalObjectValues = Object.create(this.tweenProperties);
          return this.tweenProperties = tmp;
        } else {
          return this.Trash();
        }
      }
    };

    Tween.prototype.Cycle = function() {
      this.cycle = true;
      return this;
    };

    Tween.prototype.Ease = function(normalizedTime) {
      switch (this.easing) {
        case Torch.Easing.Linear:
          return normalizedTime;
        case Torch.Easing.Square:
          return Math.pow(normalizedTime, 2);
        case Torch.Easing.Cube:
          return Math.pow(normalizedTime, 3);
        case Torch.Easing.InverseSquare:
          return 1 - Math.pow(1 - normalizedTime, 2);
        case Torch.Easing.InverseCube:
          return 1 - Math.pow(1 - normalizedTime, 3);
        case Torch.Easing.Smooth:
          return normalizedTime * normalizedTime * (3 - 2 * normalizedTime);
        case Torch.Easing.SmoothSquare:
          return Math.pow(normalizedTime * normalizedTime * (3 - 2 * normalizedTime), 2);
        case Torch.Easing.SmoothCube:
          return Math.pow(normalizedTime * normalizedTime * (3 - 2 * normalizedTime), 3);
        case Torch.Easing.Sine:
          return Math.sin(normalizedTime * Math.PI / 2);
        case Torch.Easing.InverseSine:
          return 1 - Math.sin((1 - normalizedTime) * Math.PI / 2);
      }
    };

    return Tween;

  })(GameThing);

  TweenSetup = (function() {
    function TweenSetup(game1, object1, timeTweenShouldTake1, easing1) {
      this.game = game1;
      this.object = object1;
      this.timeTweenShouldTake = timeTweenShouldTake1;
      this.easing = easing1;
    }

    TweenSetup.prototype.To = function(tweenProperties) {
      return new Tween(this.game, this.object, tweenProperties, this.timeTweenShouldTake, this.easing);
    };

    TweenSetup.prototype.From = function(setProperties) {
      var key, value;
      for (key in setProperties) {
        value = setProperties[key];
        this.object[key] = value;
      }
      return this;
    };

    return TweenSetup;

  })();

  TweenManager = (function() {
    function TweenManager(game1) {
      this.game = game1;
      this.tweens = [];
    }

    TweenManager.prototype.Tween = function(object, timeTweenShouldTake, easing) {
      if (easing == null) {
        easing = Torch.Easing.Smooth;
      }
      return new TweenSetup(this.game, object, timeTweenShouldTake, easing);
    };

    TweenManager.prototype.All = function(callback) {
      var k, len, ref, results, tween;
      ref = this.game.tweens;
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        tween = ref[k];
        results.push(callback(tween));
      }
      return results;
    };

    return TweenManager;

  })();

  ParticleEmitter = (function(superClass) {
    extend(ParticleEmitter, superClass);

    ParticleEmitter.prototype.particle = null;

    ParticleEmitter.prototype.auto = true;

    function ParticleEmitter(game1, x, y, interval1, loop, particle1, config1) {
      this.game = game1;
      this.interval = interval1;
      this.loop = loop;
      this.particle = particle1;
      this.config = config1;
      this.InitSprite(this.game, x, y);
      this.elapsedTime = 0;
      this.hasEmitted = false;
    }

    ParticleEmitter.prototype.Update = function() {
      ParticleEmitter.__super__.Update.call(this);
      if (this.interval !== void 0) {
        if (this.hasEmitted) {
          if (this.loop) {
            return this.UpdateParticleEmitter();
          }
        } else {
          return this.UpdateParticleEmitter();
        }
      }
    };

    ParticleEmitter.prototype.Particle = function(particle) {
      return particle = particle;
    };

    ParticleEmitter.prototype.UpdateParticleEmitter = function() {
      if (!this.auto) {
        return;
      }
      this.elapsedTime += this.game.Loop.updateDelta;
      if (this.elapsedTime >= this.interval) {
        this.EmitParticles();
        this.hasEmitted = true;
        return this.elapsedTime = 0;
      }
    };

    ParticleEmitter.prototype.EmitParticles = function(removeEmitterWhenDone) {
      var i;
      if (removeEmitterWhenDone == null) {
        removeEmitterWhenDone = false;
      }
      i = 0;
      while (i < this.config.spread) {
        i++;
        this.EmitParticle();
      }
      if (removeEmitterWhenDone) {
        return this.Trash();
      }
    };

    ParticleEmitter.prototype.EmitParticle = function() {
      var alphaDecay, angle, p, radius, scale, x, y;
      angle = Util.Math.RandomInRange(this.config.minAngle, this.config.maxAngle);
      scale = Util.Math.RandomInRange(this.config.minScale, this.config.maxScale);
      alphaDecay = Util.Math.RandomInRange(this.config.minAlphaDecay, this.config.maxAlphaDecay);
      radius = Util.Math.RandomInRange(this.config.minRadius, this.config.maxRadius);
      x = this.position.x;
      y = this.position.y;
      if (typeof this.particle !== "string") {
        p = new this.particle(this.game, x, y);
      } else {
        p = this.game.Factory.Sprite(x, y, this.particle);
      }
      p.Body.velocity.x = Math.cos(angle) * Util.Math.RandomInRange(this.config.minVelocity, this.config.maxVelocity);
      p.Body.velocity.y = Math.sin(angle) * Util.Math.RandomInRange(this.config.minVelocity, this.config.maxVelocity);
      p.Body.omega = Util.Math.RandomInRange(this.config.minOmega, this.config.maxOmega);
      p.Size.Scale(scale, scale);
      p.drawIndex = 1000;
      return this.game.Tweens.Tween(p, alphaDecay, Torch.Easing.Smooth).To({
        opacity: 0
      }).On("Finish", function() {
        return p.Trash();
      });
    };

    return ParticleEmitter;

  })(Sprite);

  ParticleManager = (function() {
    function ParticleManager(game1) {
      this.game = game1;
    }

    ParticleManager.prototype.ParticleEmitter = function(x, y, interval, shouldLoop, particle, config) {
      return new ParticleEmitter(this.game, x, y, interval, shouldLoop, particle, config);
    };

    return ParticleManager;

  })();

  Sound = (function() {
    Sound.prototype.volume = 1;

    Sound.prototype.pan = 0;

    function Sound(soundId) {
      this.soundId = soundId;
    }

    return Sound;

  })();

  Audio = (function() {
    Audio.prototype.audioContext = null;

    Audio.prototype.MasterVolume = 1;

    function Audio(game1) {
      this.game = game1;
      this.GetAudioContext();
    }

    Audio.prototype.GetAudioContext = function() {
      var e;
      try {
        window.AudioContext = window.AudioContext || window.webkitAudioContext;
        return this.audioContext = new AudioContext();
      } catch (error1) {
        e = error1;
        return console.warn("Unable to initialize audio...");
      }
    };

    Audio.prototype.DecodeAudioData = function(data, callback) {
      return this.audioContext.decodeAudioData(data, function(buffer) {
        return callback(buffer);
      });
    };

    Audio.prototype.CreateAudioPlayer = function() {
      return new AudioPlayer(this);
    };

    return Audio;

  })();

  AudioPlayer = (function() {
    AudioPlayer.prototype.volume = 1;

    function AudioPlayer(aud) {
      this.audioContext = aud.audioContext;
      this.game = aud.game;
    }

    AudioPlayer.prototype.CreateGain = function(gain) {
      var gainNode;
      if (gain == null) {
        gain = 1;
      }
      gainNode = this.audioContext.createGain();
      gainNode.gain.value = gain;
      return gainNode;
    };

    AudioPlayer.prototype.Play = function(sound) {
      return this.game.FatalError("Cannot play sound. sound must be Torch.Sound");
    };

    AudioPlayer.prototype.PlaySound = function(id, time, filters) {
      var filter, index, k, lastFilter, len, source;
      if (time == null) {
        time = 0;
      }
      if (filters == null) {
        filters = null;
      }
      source = this.audioContext.createBufferSource();
      source.buffer = this.game.Assets.audio[id].audioData;
      if (this.game.Audio.MasterVolume !== 1) {
        if (filters === null) {
          filters = [this.CreateGain(this.game.Audio.MasterVolume)];
        } else {
          filters.push(this.CreateGain(this.game.Audio.MasterVolume));
        }
      }
      if (filters === null) {
        filters = [this.CreateGain(this.volume)];
      } else {
        filters = slice.call(filters).concat([this.CreateGain(this.volume)]);
      }
      lastFilter = null;
      for (index = k = 0, len = filters.length; k < len; index = ++k) {
        filter = filters[index];
        if (lastFilter === null) {
          source.connect(filter);
        } else {
          lastFilter.connect(filter);
        }
        lastFilter = filter;
        if (index === filters.length - 1) {
          filter.connect(this.audioContext.destination);
          source.start(time);
          return;
        }
      }
      source.connect(this.audioContext.destination);
      return source.start(time);
    };

    return AudioPlayer;

  })();

  HookManager = (function() {
    HookManager.prototype.positionTransform = null;

    function HookManager(game1) {
      this.game = game1;
      this.positionTransform = new Point(0, 0);
    }

    return HookManager;

  })();

  GameThingFactory = (function() {
    GameThingFactory.prototype.game = null;

    function GameThingFactory(game1) {
      this.game = game1;
    }

    GameThingFactory.prototype.Sprite = function(x, y, texture) {
      var sprite;
      sprite = new Sprite(this.game, x, y);
      if (texture != null) {
        sprite.Bind.Texture(texture);
      }
      return sprite;
    };

    GameThingFactory.prototype.Group = function(x, y) {
      var group;
      group = new SpriteGroup(this.game, x, y);
      return group;
    };

    GameThingFactory.prototype.Text = function(x, y, config) {
      var text;
      if (config == null) {
        config = {};
      }
      text = new Text(this.game, x, y, config);
      return text;
    };

    GameThingFactory.prototype.Thing = function(update, draw) {
      var thing;
      thing = new GameThing();
      if (update != null) {
        thing.Update = update;
      }
      if (draw != null) {
        thing.Draw = draw;
      }
      this.game.Add(thing);
      return thing;
    };

    GameThingFactory.prototype.Button = function(x, y, textConfig, backgroundConfig) {
      var button, text;
      text = this.Text(x, y, {
        text: textConfig.text || "button",
        color: textConfig.color || "white",
        font: textConfig.font || "monospace",
        fontSize: textConfig.fontSize || 12
      });
      button = this.Sprite(x, y, backgroundConfig.mainBackground);
      text.Grid.Center().CenterVertical();
      button.Grid.Append(text);
      button.On("Trash", function() {
        return text.Trash();
      });
      button.On("MouseDown", function() {
        return button.Bind.Texture(backgroundConfig.mouseDownBackground || backgroundConfig.mainBackground);
      });
      button.On("MouseUp", function() {
        return button.Bind.Texture(backgroundConfig.mainBackground);
      });
      return button;
    };

    return GameThingFactory;

  })();

  GamePad = (function() {
    GamePad.MixIn(EventDispatcher);

    GamePad.prototype.connected = false;

    GamePad.prototype.buttons = null;

    GamePad.prototype.sticks = null;

    function GamePad(game1, index1) {
      this.game = game1;
      this.index = index1;
      this.InitEventDispatch();
      this.buttons = {
        A: new GamePadButton(this, 1),
        B: new GamePadButton(this, 2),
        X: new GamePadButton(this, 3),
        Y: new GamePadButton(this, 4),
        LeftBumper: new GamePadButton(this, 5),
        RightBumper: new GamePadButton(this, 6),
        LeftTrigger: new GamePadButton(this, 7),
        RightTrigger: new GamePadButton(this, 8),
        Back: new GamePadButton(this, 9),
        Start: new GamePadButton(this, 10),
        LeftStick: new GamePadButton(this, 11),
        RightStick: new GamePadButton(this, 12),
        DPadUp: new GamePadButton(this, 13),
        DPadDown: new GamePadButton(this, 14),
        DPadLeft: new GamePadButton(this, 15),
        DPadRight: new GamePadButton(this, 16)
      };
      this.buttonMap = ["A", "B", "X", "Y", "LeftBumper", "RightBumper", "LeftTrigger", 'RightTrigger', "Back", "Start", "LeftStick", "RightStick", "DPadUp", "DPadDown", "DPadLeft", "DPadRight"];
      this.sticks = {
        LeftStick: new GamePadStick(this),
        RightStick: new GamePadStick(this)
      };
    }

    GamePad.prototype.SetState = function(nativeGamePad) {
      var axes, button, index, k, len, nativeButton, ref;
      this.connected = nativeGamePad.connected;
      ref = nativeGamePad.buttons;
      for (index = k = 0, len = ref.length; k < len; index = ++k) {
        nativeButton = ref[index];
        button = this.buttons[this.buttonMap[index]];
        if (button != null) {
          button.SetState(nativeButton);
        }
      }
      axes = nativeGamePad.axes;
      this.sticks.LeftStick.SetState(axes[0], axes[1]);
      return this.sticks.RightStick.SetState(axes[2], axes[3]);
    };

    return GamePad;

  })();

  GamePadManager = (function() {
    GamePadManager.prototype._pads = null;

    function GamePadManager(game1) {
      this.game = game1;
      this._pads = [new GamePad(this.game), new GamePad(this.game), new GamePad(this.game), new GamePad(this.game)];
    }

    GamePadManager.prototype.Pad = function(index) {
      return this._pads[index];
    };

    GamePadManager.prototype.Update = function() {
      var index, k, len, nativeGamePads, pad, results;
      nativeGamePads = navigator.getGamepads();
      results = [];
      for (index = k = 0, len = nativeGamePads.length; k < len; index = ++k) {
        pad = nativeGamePads[index];
        if (pad != null) {
          results.push(this._pads[index].SetState(pad));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    return GamePadManager;

  })();

  GamePadButton = (function() {
    GamePadButton.MixIn(EventDispatcher);

    GamePadButton.prototype._wasDown = false;

    GamePadButton.prototype.down = false;

    function GamePadButton(gamePad, buttonCode) {
      this.gamePad = gamePad;
      this.buttonCode = buttonCode;
      this.InitEventDispatch();
      this.game = this.gamePad.game;
    }

    GamePadButton.prototype.SetState = function(nativeGamePadButton) {
      if (this._wasDown && !nativeGamePadButton.pressed) {
        this.Emit("ButtonPressed", new Torch.Event(this.game, {
          button: this
        }));
      }
      this.down = nativeGamePadButton.pressed;
      return this._wasDown = this.down;
    };

    return GamePadButton;

  })();

  GamePadStick = (function() {
    GamePadStick.MixIn(EventDispatcher);

    GamePadStick.prototype.horizontalAxis = 0;

    GamePadStick.prototype.verticalAxis = 0;

    GamePadStick.prototype.EPSILON = 0.1;

    function GamePadStick(gamePad) {
      this.gamePad = gamePad;
    }

    GamePadStick.prototype.SetState = function(horizontalAxis, verticalAxis) {
      if (Math.abs(horizontalAxis) > this.EPSILON) {
        this.horizontalAxis = horizontalAxis;
      } else {
        this.horizontalAxis = 0;
      }
      if (Math.abs(verticalAxis) > this.EPSILON) {
        return this.verticalAxis = verticalAxis;
      } else {
        return this.verticalAxis = 0;
      }
    };

    return GamePadStick;

  })();

  CanvasGame = (function() {
    CanvasGame.prototype.torch_type = "Game";

    function CanvasGame(canvasId, width1, height1, name1, graphicsType, pixel) {
      this.canvasId = canvasId;
      this.width = width1;
      this.height = height1;
      this.name = name1;
      this.graphicsType = graphicsType;
      this.pixel = pixel != null ? pixel : 0;
      this.InitGame();
    }

    CanvasGame.MixIn(EventDispatcher);

    CanvasGame.prototype.InitGame = function() {
      this.InitEventDispatch();
      this.InitGraphics();
      this.InitComponents();
      return this.Style();
    };

    CanvasGame.prototype.InitComponents = function() {
      var graphicsString, styleString;
      styleString = "background-color:" + (Color.Flame.GetHtmlString()) + "; color:" + (Color.Ruby.GetHtmlString()) + "; font-weight: bold; padding:2px; padding-right:5px;padding-left:5px";
      graphicsString = "WebGL";
      if (this.graphicsType === Torch.CANVAS) {
        graphicsString = "Canvas";
      }
      console.log("%c Torch v" + Torch.prototype.version + " |" + graphicsString + "| - " + this.name, styleString);
      this.Loop = new Loop(this);
      this.Assets = new AssetManager(this);
      this.Load = new Load(this);
      this.Mouse = new Mouse(this);
      this.Timer = new Timer(this);
      this.Camera = new Camera(this);
      this.Layers = new Layers(this);
      this.Keys = new Keys(this);
      this.Tweens = new TweenManager(this);
      this.Particles = new ParticleManager(this);
      this.Audio = new Audio(this);
      this.Hooks = new HookManager(this);
      this.Factory = new GameThingFactory(this);
      this.State = new StateMachine(this);
      this.GamePads = new GamePadManager(this);
      this.deltaTime = 0;
      this.fps = 0;
      this.averageFps = 0;
      this.allFPS = 0;
      this.ticks = 0;
      this.zoom = 1;
      this.uidCounter = 0;
      this.paused = false;
      this.boundary = null;
      this.time = null;
      this.LastTimeStamp = null;
      this.things = [];
      this.DrawStack = [];
      this.AddStack = [];
      this.thingMap = {};
      return this.filter = {};
    };

    CanvasGame.prototype.InitGraphics = function() {
      this.canvasNode = document.createElement("CANVAS");
      this.canvasNode.width = window.innerWidth;
      this.canvasNode.height = window.innerHeight;
      document.getElementById(this.canvasId).appendChild(this.canvasNode);
      this.canvas = this.canvasNode.getContext("2d");
      return this.Clear("#cc5200");
    };

    CanvasGame.prototype.PixelScale = function() {
      this.canvas.mozImageSmoothingEnabled = false;
      this.canvas.imageSmoothingEnabled = false;
      return this;
    };

    CanvasGame.prototype.Start = function(configObject) {
      var defaultConfigObject;
      defaultConfigObject = {
        Load: function() {},
        Update: function() {},
        Draw: function() {},
        Init: function() {}
      };
      Util.Object(defaultConfigObject).Extend(configObject);
      this.load = defaultConfigObject.Load;
      this.update = defaultConfigObject.Update;
      this.draw = defaultConfigObject.Draw;
      this.init = defaultConfigObject.Init;
      this.load(this);
      this.Load.Load();
      this.Load.On("LoadFinished", (function(_this) {
        return function() {
          _this.init(_this);
          _this.WireUpEvents();
          return _this.Run();
        };
      })(this));
      this.canvasNode.width = this.width;
      this.canvasNode.height = this.height;
      if (typeof this.width === "string") {
        this.canvasNode.width = document.body.clientWidth;
      }
      if (typeof this.height === "string") {
        return this.canvasNode.height = document.body.clientHeight;
      }
    };

    CanvasGame.prototype.Add = function(o) {
      if (!o.torch_game_thing) {
        throw new ER.ArgumentError();
      }
      this.uidCounter++;
      o.torch_uid = "thing" + this.uidCounter;
      o.torch_add_order = this.uidCounter;
      return this.AddStack.push(o);
    };

    CanvasGame.prototype.GetById = function(id) {
      return this.thingMap[id];
    };

    CanvasGame.prototype.Run = function(timestamp) {
      return this.Loop.Run(0);
    };

    CanvasGame.prototype.FatalError = function(error) {
      var errorHtml, stack;
      if (this.fatal) {
        return;
      }
      this.fatal = true;
      if (typeof error === "string") {
        error = new Error(error);
      }
      this.Clear("#000");
      stack = error.stack.replace(/\n/g, "<br><br>");
      errorHtml = "<code style='color:#C9302Cmargin-left:15%font-size:24px'>" + error + "</code>\n<br>\n<code style='color:#C9302Cfont-size:20pxfont-weight:bold'>Stack Trace:</code>\n<br>\n<code style='color:#C9302Cfont-size:20px'>" + stack + "</code>\n<br>\n<code style='color:#C9302Cfont-size:18px'>Time: " + this.time + "</code>";
      document.body.innerHTML = errorHtml;
      this.RunGame = function() {};
      this.Run = function() {};
      this.Emit("FatalError", new Torch.Event(this, {
        error: error
      }));
      throw error;
    };

    CanvasGame.prototype.UpdateThings = function() {
      var filtered, k, len, ref, thing;
      filtered = [];
      ref = this.things;
      for (k = 0, len = ref.length; k < len; k++) {
        thing = ref[k];
        if (!thing.trash) {
          if (!thing.paused) {
            thing.Update();
            filtered.push(thing);
          }
        } else {
          thing.trashed = true;
          if (thing.Emit != null) {
            thing.Emit("Trash", new Torch.Event(this));
          }
        }
      }
      this.things = filtered;
      this.things = this.things.concat(this.AddStack);
      return this.AddStack = [];
    };

    CanvasGame.prototype.DrawThings = function() {
      var k, len, ref, results, sprite;
      this.canvas.clearRect(0, 0, this.Camera.Viewport.maxWidth, this.Camera.Viewport.maxHeight);
      this.things.sort(function(a, b) {
        if (a.drawIndex === b.drawIndex) {
          return a.torch_add_order - b.torch_add_order;
        }
        return a.drawIndex - b.drawIndex;
      });
      ref = this.things;
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        sprite = ref[k];
        if (!sprite.trash) {
          results.push(sprite.Draw());
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    CanvasGame.prototype.Clear = function(color) {
      if (color === void 0) {
        this.FatalError("Cannot clear undefined color");
      }
      if (typeof color === "object") {
        color = color.hex;
      }
      this.canvasNode.style.backgroundColor = color;
      return this;
    };

    CanvasGame.prototype.SetBoundaries = function(x, y, width, height) {
      return this.boundary = new Rectangle(x, y, width, height);
    };

    CanvasGame.prototype.getCanvasEvents = function() {
      var evts;
      evts = [
        [
          "mousemove", (function(_this) {
            return function(e) {
              _this.Mouse.SetMousePos(_this.canvasNode, e);
              return _this.Emit("MouseMove", new Torch.Event(_this, {
                nativeEvent: e
              }));
            };
          })(this)
        ], [
          "mousedown", (function(_this) {
            return function(e) {
              _this.Mouse.down = true;
              return _this.Emit("MouseDown", new Torch.Event(_this, {
                nativeEvent: e
              }));
            };
          })(this)
        ], [
          "mouseup", (function(_this) {
            return function(e) {
              _this.Mouse.down = false;
              return _this.Emit("MouseUp", new Torch.Event(_this, {
                nativeEvent: e
              }));
            };
          })(this)
        ], [
          "touchstart", (function(_this) {
            return function(e) {
              return _this.Mouse.down = true;
            };
          })(this)
        ], [
          "touchend", (function(_this) {
            return function(e) {
              return _this.Mouse.down = false;
            };
          })(this)
        ], [
          "click", (function(_this) {
            return function(e) {
              e.preventDefault();
              e.stopPropagation();
              _this.Emit("Click", new Torch.Event(_this, {
                nativeEvent: e
              }));
              return false;
            };
          })(this)
        ]
      ];
      return evts;
    };

    CanvasGame.prototype.getBodyEvents = function() {
      var bodyEvents;
      bodyEvents = [
        [
          "keydown", (function(_this) {
            return function(e) {
              var c, key;
              c = e.keyCode;
              key = _this.Keys.SpecialKey(c);
              if (key === null) {
                key = _this.Keys[String.fromCharCode(e.keyCode).toUpperCase()];
              }
              key.down = true;
              return key.Emit("KeyDown", new Torch.Event(_this, {
                nativeEvent: e
              }));
            };
          })(this)
        ], [
          "keyup", (function(_this) {
            return function(e) {
              var c, key;
              c = e.keyCode;
              key = _this.Keys.SpecialKey(c);
              if (key === null) {
                key = _this.Keys[String.fromCharCode(e.keyCode).toUpperCase()];
              }
              key.down = false;
              return key.Emit("KeyUp", new Torch.Event(_this, {
                nativeEvent: e
              }));
            };
          })(this)
        ]
      ];
      return bodyEvents;
    };

    CanvasGame.prototype.WireUpEvents = function() {
      var eventItem, k, len, len1, m, pads, ref, ref1, resize;
      ref = this.getCanvasEvents();
      for (k = 0, len = ref.length; k < len; k++) {
        eventItem = ref[k];
        this.canvasNode.addEventListener(eventItem[0], eventItem[1], false);
      }
      ref1 = this.getBodyEvents();
      for (m = 0, len1 = ref1.length; m < len1; m++) {
        eventItem = ref1[m];
        document.body.addEventListener(eventItem[0], eventItem[1], false);
      }
      resize = (function(_this) {
        return function(event) {
          return _this.Emit("Resize", new Torch.Event(_this, {
            nativeEvent: event
          }));
        };
      })(this);
      window.addEventListener('resize', resize, false);
      return pads = navigator.getGamepads();
    };

    CanvasGame.prototype.TogglePause = function() {
      if (!this.paused) {
        this.paused = true;
      } else {
        this.paused = false;
      }
      return this;
    };

    CanvasGame.prototype.Style = function() {
      var body, canvas;
      body = document.body;
      body.style.backgroundColor = "black";
      body.style.overflow = "hidden";
      body.style.margin = 0;
      canvas = document.getElementsByTagName("CANVAS")[0];
      return canvas.style.cursor = "pointer";
    };

    return CanvasGame;

  })();

  Game = CanvasGame;

  TorchModule(Game, "Game");

  TorchModule(Texture = (function() {
    Texture.prototype.image = null;

    Texture.prototype.drawParams = null;

    Texture.prototype.width = 0;

    Texture.prototype.height = 0;

    function Texture(image1) {
      this.image = image1;
      this.width = this.image.width;
      this.height = this.image.height;
      this.drawParams = new DrawParams(this.width, this.height);
    }

    return Texture;

  })());

  DrawParams = (function() {
    DrawParams.prototype.clipX = 0;

    DrawParams.prototype.clipY = 0;

    DrawParams.prototype.clipWidth = 0;

    DrawParams.prototype.clipHeight = 0;

    function DrawParams(clipWidth, clipHeight) {
      this.clipWidth = clipWidth;
      this.clipHeight = clipHeight;
    }

    return DrawParams;

  })();

  TorchModule(Video = (function() {
    Video.prototype.video = null;

    Video.prototype.drawParams = null;

    Video.prototype.width = 0;

    Video.prototype.height = 0;

    function Video(video1) {
      this.video = video1;
      this.width = this.video.videoWidth;
      this.height = this.video.videoHeight;
      this.drawParams = new DrawParams(this.width, this.height);
    }

    Video.prototype.Play = function() {
      this.video.play();
      return this;
    };

    Video.prototype.Stop = function() {
      this.video.stop();
      return this;
    };

    Video.prototype.Loop = function(turnOn) {
      if (turnOn == null) {
        turnOn = true;
      }
      this.video.loop = turnOn;
      return this;
    };

    return Video;

  })());

  TorchModule(StateMachine = (function() {
    function StateMachine(obj1) {
      this.obj = obj1;
      this.currentState = null;
      this.states = {};
      this.game = this.obj.game;
    }

    StateMachine.prototype.State = function(stateName, stateObj) {
      if (stateObj === void 0) {
        if (this.states[stateName] === void 0) {
          Torch.FatalError("Unable to get state. State '" + stateName + "' has not been added to the state machine");
        }
        return this.states[stateName];
      } else {
        stateObj.stateMachine = this;
        stateObj.game = this.game;
        return this.states[stateName] = stateObj;
      }
    };

    StateMachine.prototype.AddState = function(stateName, stateObj) {
      this.states[stateName] = stateObj;
      stateObj.game = this.game;
      return stateObj.stateMachine = this;
    };

    StateMachine.prototype.Switch = function() {
      var args, newState, ref, ref1;
      newState = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      if (this.currentState && this.currentState.End !== void 0) {
        (ref = this.currentState).End.apply(ref, [this.obj].concat(slice.call(args)));
      }
      if (this.State(newState).Start !== void 0) {
        (ref1 = this.State(newState)).Start.apply(ref1, [this.obj].concat(slice.call(args)));
      }
      return this.currentState = this.State(newState);
    };

    StateMachine.prototype.Update = function() {
      if (this.currentState !== null && this.currentState !== void 0) {
        return this.currentState.Execute(this.obj);
      }
    };

    return StateMachine;

  })());

  State = (function() {
    function State(Execute, Start, End) {
      this.Execute = Execute;
      this.Start = Start;
      this.End = End;
    }

    return State;

  })();

  TorchModule(Color = (function() {
    Color.prototype.hex = null;

    Color.prototype.r = null;

    Color.prototype.g = null;

    Color.prototype.b = null;

    function Color(rOrHex, g, b) {
      this.Set(rOrHex, g, b);
    }

    Color.prototype.Set = function(rOrHex, g, b) {
      if (typeof rOrHex === "string") {
        this.hex = rOrHex;
        return this.DecodeHex();
      } else {
        this.r = rOrHex;
        this.g = g;
        this.b = b;
        return this.EncodeHex();
      }
    };

    Color.prototype.DecodeHex = function() {
      var chunks;
      chunks = Util.String(this.hex).Chunk(2);
      this.r = parseInt(chunks[0], 16);
      this.g = parseInt(chunks[1], 16);
      return this.b = parseInt(chunks[2], 16);
    };

    Color.prototype.EncodeHex = function() {
      this.hex = "";
      this.hex += this.r.toString(16);
      this.hex += this.g.toString(16);
      return this.hex += this.b.toString(16);
    };

    Color.prototype.GetHtmlString = function() {
      return "#" + this.hex;
    };

    Color.prototype.Invert = function() {
      return this.Set(Math.floor(Math.abs(255 - this.r)), Math.floor(Math.abs(255 - this.g)), Math.floor(Math.abs(255 - this.b)));
    };

    Color.Random = function() {
      return new Color(Math.floor(Util.Math.RandomInRange(0, 255)), Math.floor(Util.Math.RandomInRange(0, 255)), Math.floor(Util.Math.RandomInRange(0, 255)));
    };

    return Color;

  })());

  Color.Red = new Color(256, 0, 0, 1);

  Color.Green = new Color(0, 256, 0, 1);

  Color.Blue = new Color(0, 0, 256, 1);

  Color.Flame = new Color("ff8000");

  Color.Ruby = new Color("e60000");

  TorchModule(Rectangle = (function() {
    function Rectangle(x1, y1, width1, height1) {
      this.x = x1;
      this.y = y1;
      this.width = width1;
      this.height = height1;
      this.z = 0;
    }

    Rectangle.prototype.GetOffset = function(rectangle) {
      var halfHeights, halfWidths, offset, sharedXPlane, sharedYPlane, vx, vy;
      vx = (this.x + (this.width / 2)) - (rectangle.x + (rectangle.width / 2));
      vy = (this.y + (this.height / 2)) - (rectangle.y + (rectangle.height / 2));
      halfWidths = (this.width / 2) + (rectangle.width / 2);
      halfHeights = (this.height / 2) + (rectangle.height / 2);
      sharedXPlane = (this.x + this.width) - (rectangle.x + rectangle.width);
      sharedYPlane = (this.y + this.height) - (rectangle.y + rectangle.height);
      offset = {
        x: halfWidths - Math.abs(vx),
        y: halfHeights - Math.abs(vy),
        vx: vx,
        vy: vy,
        halfWidths: halfWidths,
        halfHeights: halfHeights,
        sharedXPlane: sharedXPlane,
        sharedYPlane: sharedYPlane
      };
      return offset;
    };

    Rectangle.prototype.Intersects = function(rectangle) {
      var a, b;
      a = this;
      b = rectangle;
      if (a.x < (b.x + b.width) && (a.x + a.width) > b.x && a.y < (b.y + b.height) && (a.y + a.height) > b.y) {
        return a.GetOffset(b);
      } else {
        return false;
      }
    };

    Rectangle.prototype.ShiftFrom = function(rectangle, transX, transY) {
      var x, y;
      x = null;
      y = null;
      if (transX === void 0) {
        x = rectangle.x;
      } else {
        x = rectangle.x + transX;
      }
      if (transY === void 0) {
        y = rectangle.y;
      } else {
        y = rectangle.y + transY;
      }
      this.x = x;
      return this.y = y;
    };

    return Rectangle;

  })());

  TorchModule(Vector = (function() {
    Vector.prototype.x = null;

    Vector.prototype.y = null;

    Vector.prototype.angle = null;

    Vector.prototype.magnitude = null;

    function Vector(x1, y1) {
      this.x = x1;
      this.y = y1;
      this.ResolveVectorProperties();
    }

    Vector.prototype.ResolveVectorProperties = function() {
      this.magnitude = Math.sqrt(this.x * this.x + this.y * this.y);
      return this.angle = Math.atan2(this.x, this.y);
    };

    Vector.prototype.Clone = function() {
      return new Vector(this.x, this.y);
    };

    Vector.prototype.Set = function(x, y) {
      this.x = x;
      this.y = y;
      return this.ResolveVectorProperties();
    };

    Vector.prototype.AddScalar = function(n) {
      this.x += n;
      this.y += n;
      return this.ResolveVectorProperties();
    };

    Vector.prototype.MultiplyScalar = function(n) {
      this.x *= n;
      this.y *= n;
      return this.ResolveVectorProperties();
    };

    Vector.prototype.DivideScalar = function(n) {
      this.x /= n;
      this.y /= n;
      return this.ResolveVectorProperties();
    };

    Vector.prototype.SubtractVector = function(v) {
      this.x -= v.x;
      this.y -= v.y;
      return this.ResolveVectorProperties();
    };

    Vector.prototype.AddVector = function(v) {
      this.x += v.x;
      this.y += v.y;
      return this.ResolveVectorProperties();
    };

    Vector.prototype.Normalize = function() {
      return this.DivideScalar(this.magnitude);
    };

    Vector.prototype.DotProduct = function(v) {
      return this.x * v.x + this.y * v.y;
    };

    Vector.prototype.IsPerpendicular = function(v) {
      return this.DotProduct(v) === 0;
    };

    Vector.prototype.IsSameDirection = function(v) {
      return this.DotProduct(v) > 0;
    };

    return Vector;

  })());

  TorchModule(Point = (function() {
    function Point(x1, y1, z) {
      this.x = x1;
      this.y = y1;
      this.z = z != null ? z : 0;
    }

    Point.prototype.Apply = function(point) {
      this.x += point.x;
      return this.y += point.y;
    };

    Point.prototype.Subtract = function(p) {
      return new Point(p.x - this.x, p.y - this.y);
    };

    Point.prototype.Clone = function() {
      return new Point(this.x, this.y);
    };

    Point.GetCenterPoint = function(points) {
      var k, len, maxX, maxY, minX, minY, point;
      maxX = 0;
      maxY = 0;
      minY = 2e308;
      minX = 2e308;
      for (k = 0, len = points.length; k < len; k++) {
        point = points[k];
        if (point.x > maxX) {
          maxX = point.x;
        }
        if (point.y > maxY) {
          maxY = point.y;
        }
        if (point.x < minX) {
          minX = point.x;
        }
        if (point.y < minY) {
          minY = point.y;
        }
      }
      return new Point((maxX - minX) * 0.5, (maxY - minY) * 0.5);
    };

    return Point;

  })());

  exports = this;


  /*
      A few notes to keep in mind:
  
      - CoffeeScript wraps each file into it's own scope when it is compiled into
        javascript. When Torch is built, it puts all the coffeescript into one file
        (torch-latest.coffee) thus throwing all of Torch into the same scope. The only
        piece that is exposed is an instance of Torch called 'Torch'
  
      - There are a few custom objects that are defined in the torch scope a little odly:
         - Util - An instance of Utilities, used internally by Torch, exported as Torch.Util
   */

  Event = (function() {
    function Event(game1, data1) {
      var key, ref, value;
      this.game = game1;
      this.data = data1;
      if (this.game !== null) {
        this.time = this.game.time;
      }
      ref = this.data;
      for (key in ref) {
        value = ref[key];
        this[key] = value;
      }
    }

    return Event;

  })();

  Torch = (function() {
    Torch.prototype.CANVAS = 1;

    Torch.prototype.WEBGL = 2;

    Torch.prototype.PIXEL = 3;

    Torch.prototype.DUMP_ERRORS = false;

    Torch.GamePads = Util.Enum("Pad1", "Pad2", "Pad3", "Pad4");

    Torch.AjaxData = Util.Enum("DOMString", "ArrayBuffer", "Blob", "Document", "Json", "Text");

    Torch.Types = Util.Enum("String", "Number", "Object", "Array", "Function", "Sprite", "Game", "Null");

    Torch.Easing = Util.Enum("Linear", "Square", "Cube", "InverseSquare", "InverseCube", "Smooth", "SmoothSquare", "SmoothCube", "Sine", "InverseSine");

    Torch.AjaxLoader = AjaxLoader;

    Torch.Event = Event;

    Torch.Util = new Utilities();

    function Torch() {
      var k, len, mod;
      this.GamePads = Torch.GamePads;
      this.AjaxData = Torch.AjaxData;
      this.Types = Torch.Types;
      this.Easing = Torch.Easing;
      this.Util = Util;
      for (k = 0, len = TorchModules.length; k < len; k++) {
        mod = TorchModules[k];
        this[mod.name] = mod.mod;
      }
    }

    Torch.FatalError = function(error) {
      var errorHtml, stack;
      if (this.fatal) {
        return;
      }
      this.fatal = true;
      if (Util.Type(error) === "string") {
        error = new Error(error);
      } else if (error.stack == null) {
        error = error.nativeError;
      }
      document.body.backgroundColor = "black";
      if (this.DUMP_ERRORS) {
        if (require !== void 0) {
          require("fs").writeFileSync("torch-error.log", error.stack);
        }
      }
      stack = error.stack.replace(/\n/g, "<br><br>");
      errorHtml = "<code style='color:#C9302C;margin-left:15%;font-size:24px'>" + error + "</code>\n<br>\n<code style='color:#C9302C;font-size:20px;font-weight:bold'>Stack Trace:</code><br>\n<code style='color:#C9302C;font-size:20px'>" + stack + "</code><br>";
      return document.body.innerHTML = errorHtml;
    };

    Torch.prototype.StrictErrors = function() {
      return this.STRICT_ERRORS = true;
    };

    Torch.prototype.DumpErrors = function() {
      return this.DUMP_ERRORS = true;
    };

    return Torch;

  })();

  exports.Torch = new Torch();

  Torch.prototype.version = '0.9.130';

}).call(this);

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=C:\dev\Torch\Builds\torch-latest.coffee