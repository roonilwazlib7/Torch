// Generated by CoffeeScript 1.12.1
(function() {
  var AttackState, EnterState, exports,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  exports = this;

  exports.Enemy = (function(superClass) {
    extend(Enemy, superClass);

    Enemy.prototype.ENEMY = true;

    Enemy.prototype.textureName = "enemy-default";

    Enemy.prototype.powerupGenerator = null;

    Enemy.prototype.positionTarget = null;

    Enemy.prototype.velocity = 0.2;

    Enemy.prototype.startVelocity = 0.5;

    Enemy.prototype.attackDistance = 500;

    Enemy.prototype.hp = 1;

    Enemy.prototype.points = 10;

    Enemy.prototype.damage = 10;

    function Enemy(game, x, y) {
      var dir;
      Enemy.__super__.constructor.call(this, game, x, y);
      this.Bind.Texture(this.textureName);
      this.Size.Scale(1, 1);
      dir = this.GetMothershipVector();
      dir.MultiplyScalar(this.startVelocity);
      this.rotation = -dir.angle;
      this.Body.velocity.Set(dir.x, dir.y);
      this.powerupGenerator = new PowerupGenerator(this);
      this.mode = this.States.CreateStateMachine("Mode");
      this.mode.AddState("enter", new EnterState());
      this.mode.AddState("attack", new AttackState());
      this.mode.Switch("enter");
      this.On("Damaged", (function(_this) {
        return function(event) {
          return _this.hp -= event.damage;
        };
      })(this));
    }

    Enemy.Load = function(game) {
      game.Load.Texture("Assets/Art/PNG/Enemies/enemyBlack4.png", "enemy-default");
      game.Load.Texture("Assets/Art/PNG/Enemies/enemyGreen4.png", "enemy-diver-2");
      game.Load.Texture("Assets/Art/PNG/Enemies/enemyBlack1.png", "enemy-shooter");
      return game.Load.Texture("Assets/Art/PNG/Enemies/enemyGreen1.png", "enemy-shooter-2");
    };

    Enemy.prototype.Kill = function() {
      this.game.audioPlayer.PlaySound("explosion-1");
      this.game.effectGenerator.CreateSimpleExplosion(this.position.x, this.position.y);
      this.Trash();
      if (Math.random() < 0.3) {
        return this.powerupGenerator.Generate();
      }
    };

    Enemy.prototype.Update = function() {
      Enemy.__super__.Update.call(this);
      if (this.hp <= 0) {
        this.Kill();
        return this.game.score += 10;
      }
    };

    Enemy.prototype.StageAttack = function() {
      return this.Effects.Trail();
    };

    Enemy.prototype.GetMothershipVector = function() {
      var dir;
      dir = this.position.Clone();
      dir.SubtractVector(this.game.motherShip.position);
      dir.MultiplyScalar(-1);
      dir.Normalize();
      return dir;
    };

    Enemy.prototype.GetDistanceToMotherShipCenter = function() {
      var dis, ms;
      dis = this.position.Clone();
      ms = this.game.motherShip.position.Clone();
      ms.x += this.game.motherShip.rectangle.width / 2;
      ms.y += this.game.motherShip.rectangle.height / 2;
      dis.SubtractVector(ms);
      return dis.magnitude;
    };

    return Enemy;

  })(Torch.Sprite);

  exports.DiverEnemy = (function(superClass) {
    extend(DiverEnemy, superClass);

    DiverEnemy.prototype.startVelocity = 0.2;

    DiverEnemy.prototype.attackVelocity = 0.4;

    DiverEnemy.prototype.attackDistance = 300;

    function DiverEnemy(game, x, y) {
      DiverEnemy.__super__.constructor.call(this, game, x, y);
      this.Collisions.Monitor();
      this.On("Collision", (function(_this) {
        return function(event) {
          var obj;
          obj = event.collisionData.collider;
          if (obj.MOTHERSHIP) {
            obj.Emit("Damaged", {
              damage: _this.damage
            });
            return _this.Kill();
          }
        };
      })(this));
    }

    DiverEnemy.prototype.StageAttack = function() {
      DiverEnemy.__super__.StageAttack.call(this);
      this.Body.velocity.Normalize();
      return this.Body.velocity.MultiplyScalar(this.attackVelocity);
    };

    return DiverEnemy;

  })(exports.Enemy);

  exports.ShooterEnemy = (function(superClass) {
    extend(ShooterEnemy, superClass);

    ShooterEnemy.prototype.points = 20;

    ShooterEnemy.prototype.hp = 2;

    ShooterEnemy.prototype.textureName = "enemy-shooter";

    function ShooterEnemy(game, x, y) {
      ShooterEnemy.__super__.constructor.call(this, game, x, y);
    }

    ShooterEnemy.prototype.Update = function() {
      var angle, p;
      ShooterEnemy.__super__.Update.call(this);
      p = this.position.Clone();
      p.SubtractVector(this.GetObjectToOrbit().position);
      angle = -p.angle + Math.PI / 2;
      return this.rotation = angle;
    };

    ShooterEnemy.prototype.GetObjectToOrbit = function() {
      return this.game.motherShip;
    };

    ShooterEnemy.prototype.StageAttack = function() {
      var scheduledEvent;
      this.orbit = true;
      this.Effects.Trail();
      this.Body.velocity.Set(0, 0);
      this.Body.Orbit(this.GetObjectToOrbit(), 0.001, 400);
      scheduledEvent = this.game.Timer.SetScheduledEvent(300, (function(_this) {
        return function() {
          var cordX, cordY, p, p1, rot, x, y;
          p = _this.position.Clone();
          p.SubtractVector(_this.GetObjectToOrbit().position);
          p.Normalize();
          p.MultiplyScalar(-1.5);
          rot = _this.rotation - Math.PI / 2;
          cordX = Math.cos(rot);
          cordY = Math.sin(rot);
          x = _this.position.x + ((_this.rectangle.width / 2) * cordX) + _this.rectangle.width / 2;
          y = _this.position.y + ((_this.rectangle.height / 2) * cordY) + _this.rectangle.height / 2;
          x -= cordX * _this.rectangle.width;
          y -= cordY * _this.rectangle.height;
          p1 = new ShooterEnemyProjectile(_this, {
            direction: p,
            x: x,
            y: y
          });
          p1.position.x -= p1.rectangle.width / 2;
          p1.position.y -= p1.rectangle.height / 2;
          p1.drawIndex = -1;
          return _this.game.audioPlayer.PlaySound("laser-shoot-2");
        };
      })(this));
      return this.On("Trash", function() {
        return scheduledEvent.Trash();
      });
    };

    return ShooterEnemy;

  })(exports.Enemy);

  exports.ShooterEnemy2 = (function(superClass) {
    extend(ShooterEnemy2, superClass);

    function ShooterEnemy2() {
      return ShooterEnemy2.__super__.constructor.apply(this, arguments);
    }

    ShooterEnemy2.prototype.textureName = "enemy-shooter-2";

    ShooterEnemy2.prototype.GetObjectToOrbit = function() {
      return this.game.player;
    };

    return ShooterEnemy2;

  })(ShooterEnemy);

  exports.DiverEnemy2 = (function(superClass) {
    extend(DiverEnemy2, superClass);

    function DiverEnemy2() {
      return DiverEnemy2.__super__.constructor.apply(this, arguments);
    }

    DiverEnemy2.prototype.targetObj = null;

    DiverEnemy2.prototype.attackVelocity = 0.5;

    DiverEnemy2.prototype.attackDistance = 700;

    DiverEnemy2.prototype.textureName = "enemy-diver-2";

    DiverEnemy2.prototype.StageAttack = function() {
      this.Effects.Trail();
      return this.targetObj = this.game.player;
    };

    DiverEnemy2.prototype.Update = function() {
      var dir;
      DiverEnemy2.__super__.Update.call(this);
      if (this.targetObj != null) {
        dir = this.position.Clone();
        dir.SubtractVector(this.targetObj.position);
        dir.MultiplyScalar(-1);
        dir.Normalize();
        dir.MultiplyScalar(this.attackVelocity);
        this.rotation = -dir.angle;
        return this.Body.velocity.Set(dir.x, dir.y);
      }
    };

    return DiverEnemy2;

  })(DiverEnemy);

  EnterState = (function() {
    function EnterState() {}

    EnterState.prototype.Execute = function(enemy) {
      if (enemy.GetDistanceToMotherShipCenter() <= enemy.attackDistance) {
        return this.stateMachine.Switch("attack");
      }
    };

    EnterState.prototype.Start = function(enemy) {};

    EnterState.prototype.End = function(enemy) {};

    return EnterState;

  })();

  AttackState = (function() {
    function AttackState() {}

    AttackState.prototype.Execute = function(enemy) {};

    AttackState.prototype.Start = function(enemy) {
      return enemy.StageAttack();
    };

    AttackState.prototype.End = function(enemy) {};

    return AttackState;

  })();

}).call(this);

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=C:\dev\Torch\Games\OpenSpace\Src\Enemy.coffee