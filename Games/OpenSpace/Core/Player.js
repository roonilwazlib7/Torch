// Generated by CoffeeScript 1.12.1
(function() {
  var Shield, exports,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  exports = this;

  exports.Player = (function(superClass) {
    extend(Player, superClass);

    Player.prototype.velocity = 0.4;

    Player.prototype.bulletFireDelay = 100;

    Player.prototype.bulletFiredAt = 0;

    Player.prototype.bulletVelocity = 1.5;

    Player.prototype.hp = 100;

    Player.prototype.PLAYER = true;

    Player.prototype._recoverTime = 2000;

    Player.prototype._recovering = false;

    Player.prototype.blinkEffect = null;

    function Player(game) {
      Player.__super__.constructor.call(this, game, 0, 0);
      this.Bind.Texture("player");
      this.Effects.Trail();
      this.Center();
      this.SetUpCollisions();
      this.bulletVector = new Torch.Vector(1, 1);
      this.position.y = this.game.Camera.Viewport.height - this.rectangle.height * 2;
      this.drawIndex = 5;
      this.shield = new Shield(this);
      this.On("Damaged", (function(_this) {
        return function(event) {
          _this.hp -= event.damage;
          return _this.game.hud.playerHealth.Deplete(event.damage);
        };
      })(this));
      this.game.On("Lose", (function(_this) {
        return function() {
          return _this.Trash();
        };
      })(this));
    }

    Player.Load = function(game) {
      game.Load.Texture("Assets/Art/PNG/playerShip1_blue.png", "player");
      return game.Load.Texture("Assets/Art/PNG/Effects/shield3.png", "shield");
    };

    Player.prototype.Update = function() {
      Player.__super__.Update.call(this);
      this.HandleHealth();
      this.HandleShooting();
      this.HandleShield();
      return this.HandleMovement();
    };

    Player.prototype.FireBullet = function() {
      var cordX, cordY, p1, rot, x, y;
      if (this.game.hud.battery.charge <= 0) {
        return;
      }
      rot = this.rotation - Math.PI / 2;
      cordX = Math.cos(rot);
      cordY = Math.sin(rot);
      this.game.hud.battery.Deplete(1);
      x = this.position.x + ((this.rectangle.width / 2) * cordX) + this.rectangle.width / 2;
      y = this.position.y + ((this.rectangle.height / 2) * cordY) + this.rectangle.height / 2;
      p1 = new Projectile(this, {
        direction: this.bulletVector,
        x: x,
        y: y
      });
      p1.position.x -= p1.rectangle.width / 2;
      p1.position.y -= p1.rectangle.height / 2;
      return this.game.audioPlayer.PlaySound("laser-shoot-1");
    };

    Player.prototype.SetUpCollisions = function() {
      this.Collisions.Monitor();
      return this.On("Collision", (function(_this) {
        return function(event) {
          return _this.HandleCollision(event);
        };
      })(this));
    };

    Player.prototype.HandleShield = function() {
      var keys;
      keys = this.game.Keys;
      if (keys.P.down) {
        return this.shield.Activate();
      } else {
        return this.shield.Activate(false);
      }
    };

    Player.prototype.HandleShooting = function() {
      var m, v;
      v = this.position.Clone();
      v.x += this.rectangle.width / 2;
      v.y += this.rectangle.height / 2;
      m = new Torch.Vector(this.game.Mouse.x, this.game.Mouse.y);
      v.SubtractVector(m);
      v.Normalize();
      this.rotation = v.angle - Math.PI / 2;
      v.MultiplyScalar(-1 * this.bulletVelocity);
      this.bulletVector = v;
      if (this.game.Mouse.down && (this.game.time - this.bulletFiredAt) >= this.bulletFireDelay) {
        this.bulletFiredAt = this.game.time;
        return this.FireBullet();
      }
    };

    Player.prototype.HandleMovement = function() {
      var keys;
      keys = this.game.Keys;
      this.Body.velocity.Set(0, 0);
      if (keys.A.down) {
        this.Body.velocity.Set(-this.velocity, 0);
      }
      if (keys.D.down) {
        this.Body.velocity.Set(this.velocity, 0);
      }
      if (keys.S.down) {
        this.Body.velocity.Set(0, this.velocity);
      }
      if (keys.W.down) {
        return this.Body.velocity.Set(0, -this.velocity);
      }
    };

    Player.prototype.HandleHealth = function() {
      if (this.hp <= 0) {
        return this.game.State.Switch("lose");
      }
    };

    Player.prototype.HandleCollision = function(event) {
      var obj;
      obj = event.collisionData.collider;
      if (obj.ENEMY && !this._recovering) {
        this.HandleEnemyCollision(obj);
      }
      if (obj.POWERUP) {
        return this.HandlePowerupCollision(obj);
      }
    };

    Player.prototype.HandleEnemyCollision = function(enemy) {
      this.Emit("Damaged", {
        damage: enemy.damage
      });
      enemy.Kill();
      this.blinkEffect = this.Effects.Blink(100);
      this._recovering = true;
      return this.game.Timer.SetFutureEvent(this._recoverTime, (function(_this) {
        return function() {
          _this.blinkEffect.Trash();
          _this._recovering = false;
          return _this.opacity = 1;
        };
      })(this));
    };

    Player.prototype.HandlePowerupCollision = function(powerup) {
      return powerup.ApplyEffect(this);
    };

    return Player;

  })(Torch.Sprite);

  Shield = (function(superClass) {
    extend(Shield, superClass);

    Shield.prototype.SHIELD = true;

    Shield.prototype.active = false;

    function Shield(player) {
      this.player = player;
      Shield.__super__.constructor.call(this, this.player.game, this.player.position.x, this.player.position.y);
      this.Bind.Texture("shield");
      this.Size.Scale(1, 1);
      this.draw = false;
      this.game.Tweens.Tween(this, 1000, Torch.Easing.Smooth).To({
        opacity: 0.4
      }).Cycle();
    }

    Shield.prototype.Update = function() {
      Shield.__super__.Update.call(this);
      this.position.x = this.player.position.x - this.rectangle.width / 5.5;
      return this.position.y = this.player.position.y - this.rectangle.height / 5;
    };

    Shield.prototype.Activate = function(turnOn) {
      if (turnOn == null) {
        turnOn = true;
      }
      this.active = turnOn;
      return this.draw = turnOn;
    };

    return Shield;

  })(Torch.Sprite);

}).call(this);

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=C:\dev\Torch\Games\OpenSpace\Src\Player.coffee